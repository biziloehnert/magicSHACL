/*
 * generated by Xtext 2.24.0
 */
grammar InternalSimple;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.magicSHACL.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.magicSHACL.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.magicSHACL.services.SimpleGrammarAccess;

}

@parser::members {

 	private SimpleGrammarAccess grammarAccess;

    public InternalSimpleParser(TokenStream input, SimpleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Graph";
   	}

   	@Override
   	protected SimpleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	iv_ruleGraph=ruleGraph
	{ $current=$iv_ruleGraph.current; }
	EOF;

// Rule Graph
ruleGraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGraphAccess().getGraphAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_1_0());
				}
				lv_shapesGraph_1_0=ruleShapesGraph
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					set(
						$current,
						"shapesGraph",
						lv_shapesGraph_1_0,
						"xtext.magicSHACL.Simple.ShapesGraph");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShapesGraph
entryRuleShapesGraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapesGraphRule()); }
	iv_ruleShapesGraph=ruleShapesGraph
	{ $current=$iv_ruleShapesGraph.current; }
	EOF;

// Rule ShapesGraph
ruleShapesGraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapesGraphAccess().getShapesGraphAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_1_0());
				}
				lv_shapeConstraints_1_0=ruleShapeConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapesGraphRule());
					}
					add(
						$current,
						"shapeConstraints",
						lv_shapeConstraints_1_0,
						"xtext.magicSHACL.Simple.ShapeConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTarget
entryRuleTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruleTarget=ruleTarget
	{ $current=$iv_ruleTarget.current; }
	EOF;

// Rule Target
ruleTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTargetAccess().getTargetAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTargetAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_term_2_0=RULE_UNICODE
				{
					newLeafNode(lv_term_2_0, grammarAccess.getTargetAccess().getTermUNICODETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetRule());
					}
					setWithLastConsumed(
						$current,
						"term",
						lv_term_2_0,
						"xtext.magicSHACL.Simple.UNICODE");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTargetAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleShapeConstraint
entryRuleShapeConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeConstraintRule()); }
	iv_ruleShapeConstraint=ruleShapeConstraint
	{ $current=$iv_ruleShapeConstraint.current; }
	EOF;

// Rule ShapeConstraint
ruleShapeConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0());
				}
				lv_shapeName_1_0=ruleShapeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeConstraintRule());
					}
					set(
						$current,
						"shapeName",
						lv_shapeName_1_0,
						"xtext.magicSHACL.Simple.ShapeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeConstraintAccess().getTargetsTargetParserRuleCall_2_0_0_0());
						}
						lv_targets_2_0=ruleTarget
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeConstraintRule());
							}
							add(
								$current,
								"targets",
								lv_targets_2_0,
								"xtext.magicSHACL.Simple.Target");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3='?'
				{
					newLeafNode(otherlv_3, grammarAccess.getShapeConstraintAccess().getQuestionMarkKeyword_2_0_1());
				}
			)
			    |
			(
				otherlv_4=':-'
				{
					newLeafNode(otherlv_4, grammarAccess.getShapeConstraintAccess().getColonHyphenMinusKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_2_1_1_0());
						}
						lv_shapeExpressions_5_0=ruleShapeExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeConstraintRule());
							}
							add(
								$current,
								"shapeExpressions",
								lv_shapeExpressions_5_0,
								"xtext.magicSHACL.Simple.ShapeExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getShapeConstraintAccess().getSemicolonKeyword_2_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleShapeName
entryRuleShapeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeNameRule()); }
	iv_ruleShapeName=ruleShapeName
	{ $current=$iv_ruleShapeName.current; }
	EOF;

// Rule ShapeName
ruleShapeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeNameAccess().getShapeNameAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_UNICODE
				{
					newLeafNode(lv_name_1_0, grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"xtext.magicSHACL.Simple.UNICODE");
				}
			)
		)
	)
;

// Entry rule entryRuleShapeExpression
entryRuleShapeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeExpressionRule()); }
	iv_ruleShapeExpression=ruleShapeExpression
	{ $current=$iv_ruleShapeExpression.current; }
	EOF;

// Rule ShapeExpression
ruleShapeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_0_1_0_0());
						}
						lv_type_1_0=rulePropertyType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeExpressionRule());
							}
							set(
								$current,
								"type",
								lv_type_1_0,
								"xtext.magicSHACL.Simple.PropertyType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_0_1_1_0());
						}
						lv_values_2_0=ruleValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeExpressionRule());
							}
							add(
								$current,
								"values",
								lv_values_2_0,
								"xtext.magicSHACL.Simple.Value");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_0_0());
					}
					lv_values_3_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShapeExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"xtext.magicSHACL.Simple.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_1_0_0());
						}
						lv_type_4_0=rulePropertyType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeExpressionRule());
							}
							set(
								$current,
								"type",
								lv_type_4_0,
								"xtext.magicSHACL.Simple.PropertyType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_1_1_0());
						}
						lv_values_5_0=ruleValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeExpressionRule());
							}
							add(
								$current,
								"values",
								lv_values_5_0,
								"xtext.magicSHACL.Simple.Value");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueAccess().getValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_UNICODE
				{
					newLeafNode(lv_name_1_0, grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"xtext.magicSHACL.Simple.UNICODE");
				}
			)
		)
	)
;

// Rule PropertyType
rulePropertyType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='MIN'
			{
				$current = grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MAX'
			{
				$current = grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='AND'
			{
				$current = grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='OR'
			{
				$current = grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='NOT'
			{
				$current = grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='SOME '
			{
				$current = grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='SOME ^'
			{
				$current = grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_UNICODE : '^'? ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|':'|'#'|'/'|'.'|'-'|'"'|'{'|'}'|'\\'|'$')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
