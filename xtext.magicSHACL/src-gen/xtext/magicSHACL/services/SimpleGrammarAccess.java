/*
 * generated by Xtext 2.24.0
 */
package xtext.magicSHACL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShapesGraphAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapesGraphShapesGraphParserRuleCall_1_0 = (RuleCall)cShapesGraphAssignment_1.eContents().get(0);
		
		//Graph:
		//	{Graph} shapesGraph=ShapesGraph;
		@Override public ParserRule getRule() { return rule; }
		
		//{Graph} shapesGraph=ShapesGraph
		public Group getGroup() { return cGroup; }
		
		//{Graph}
		public Action getGraphAction_0() { return cGraphAction_0; }
		
		//shapesGraph=ShapesGraph
		public Assignment getShapesGraphAssignment_1() { return cShapesGraphAssignment_1; }
		
		//ShapesGraph
		public RuleCall getShapesGraphShapesGraphParserRuleCall_1_0() { return cShapesGraphShapesGraphParserRuleCall_1_0; }
	}
	public class ShapesGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.ShapesGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapesGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShapeConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeConstraintsShapeConstraintParserRuleCall_1_0 = (RuleCall)cShapeConstraintsAssignment_1.eContents().get(0);
		
		//ShapesGraph:
		//	{ShapesGraph} shapeConstraints+=ShapeConstraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapesGraph} shapeConstraints+=ShapeConstraint*
		public Group getGroup() { return cGroup; }
		
		//{ShapesGraph}
		public Action getShapesGraphAction_0() { return cShapesGraphAction_0; }
		
		//shapeConstraints+=ShapeConstraint*
		public Assignment getShapeConstraintsAssignment_1() { return cShapeConstraintsAssignment_1; }
		
		//ShapeConstraint
		public RuleCall getShapeConstraintsShapeConstraintParserRuleCall_1_0() { return cShapeConstraintsShapeConstraintParserRuleCall_1_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermUNICODETerminalRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Target:
		//	{Target}
		//	'(' term=UNICODE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Target}
		//'(' term=UNICODE ')'
		public Group getGroup() { return cGroup; }
		
		//{Target}
		public Action getTargetAction_0() { return cTargetAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//term=UNICODE
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//UNICODE
		public RuleCall getTermUNICODETerminalRuleCall_2_0() { return cTermUNICODETerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ShapeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.ShapeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShapeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeNameShapeNameParserRuleCall_1_0 = (RuleCall)cShapeNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTargetsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTargetsTargetParserRuleCall_2_0_0_0 = (RuleCall)cTargetsAssignment_2_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cShapeExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cShapeExpressionsShapeExpressionParserRuleCall_2_1_1_0 = (RuleCall)cShapeExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ShapeConstraint:
		//	{ShapeConstraint} shapeName=ShapeName (targets+=Target '?' | ':-' shapeExpressions+=ShapeExpression ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeConstraint} shapeName=ShapeName (targets+=Target '?' | ':-' shapeExpressions+=ShapeExpression ';')
		public Group getGroup() { return cGroup; }
		
		//{ShapeConstraint}
		public Action getShapeConstraintAction_0() { return cShapeConstraintAction_0; }
		
		//shapeName=ShapeName
		public Assignment getShapeNameAssignment_1() { return cShapeNameAssignment_1; }
		
		//ShapeName
		public RuleCall getShapeNameShapeNameParserRuleCall_1_0() { return cShapeNameShapeNameParserRuleCall_1_0; }
		
		//(targets+=Target '?' | ':-' shapeExpressions+=ShapeExpression ';')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//targets+=Target '?'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//targets+=Target
		public Assignment getTargetsAssignment_2_0_0() { return cTargetsAssignment_2_0_0; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_2_0_0_0() { return cTargetsTargetParserRuleCall_2_0_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0_1() { return cQuestionMarkKeyword_2_0_1; }
		
		//':-' shapeExpressions+=ShapeExpression ';'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//':-'
		public Keyword getColonHyphenMinusKeyword_2_1_0() { return cColonHyphenMinusKeyword_2_1_0; }
		
		//shapeExpressions+=ShapeExpression
		public Assignment getShapeExpressionsAssignment_2_1_1() { return cShapeExpressionsAssignment_2_1_1; }
		
		//ShapeExpression
		public RuleCall getShapeExpressionsShapeExpressionParserRuleCall_2_1_1_0() { return cShapeExpressionsShapeExpressionParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_2() { return cSemicolonKeyword_2_1_2; }
	}
	public class ShapeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.ShapeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUNICODETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ShapeName:
		//	{ShapeName} name=UNICODE;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeName} name=UNICODE
		public Group getGroup() { return cGroup; }
		
		//{ShapeName}
		public Action getShapeNameAction_0() { return cShapeNameAction_0; }
		
		//name=UNICODE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UNICODE
		public RuleCall getNameUNICODETerminalRuleCall_1_0() { return cNameUNICODETerminalRuleCall_1_0; }
	}
	public class ShapeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.ShapeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cShapeExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cTypePropertyTypeEnumRuleCall_0_1_0_0 = (RuleCall)cTypeAssignment_0_1_0.eContents().get(0);
		private final Assignment cValuesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_0_1_1_0 = (RuleCall)cValuesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypePropertyTypeEnumRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		
		//ShapeExpression:
		//	{ShapeExpression} (type=PropertyType values+=Value*) | values+=Value (type=PropertyType values+=Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeExpression} (type=PropertyType values+=Value*) | values+=Value (type=PropertyType values+=Value)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ShapeExpression} (type=PropertyType values+=Value*)
		public Group getGroup_0() { return cGroup_0; }
		
		//{ShapeExpression}
		public Action getShapeExpressionAction_0_0() { return cShapeExpressionAction_0_0; }
		
		//(type=PropertyType values+=Value*)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//type=PropertyType
		public Assignment getTypeAssignment_0_1_0() { return cTypeAssignment_0_1_0; }
		
		//PropertyType
		public RuleCall getTypePropertyTypeEnumRuleCall_0_1_0_0() { return cTypePropertyTypeEnumRuleCall_0_1_0_0; }
		
		//values+=Value*
		public Assignment getValuesAssignment_0_1_1() { return cValuesAssignment_0_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_0_1_1_0() { return cValuesValueParserRuleCall_0_1_1_0; }
		
		//values+=Value (type=PropertyType values+=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_0_0() { return cValuesValueParserRuleCall_1_0_0; }
		
		//(type=PropertyType values+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//type=PropertyType
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//PropertyType
		public RuleCall getTypePropertyTypeEnumRuleCall_1_1_0_0() { return cTypePropertyTypeEnumRuleCall_1_1_0_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_1_0() { return cValuesValueParserRuleCall_1_1_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUNICODETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Value:
		//	{Value} name=UNICODE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} name=UNICODE
		public Group getGroup() { return cGroup; }
		
		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//name=UNICODE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UNICODE
		public RuleCall getNameUNICODETerminalRuleCall_1_0() { return cNameUNICODETerminalRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class PropertyTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.PropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinCountConstraintComponentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinCountConstraintComponentMINKeyword_0_0 = (Keyword)cMinCountConstraintComponentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxCountConstraintComponentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxCountConstraintComponentMAXKeyword_1_0 = (Keyword)cMaxCountConstraintComponentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAndConstraintComponentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAndConstraintComponentANDKeyword_2_0 = (Keyword)cAndConstraintComponentEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOrConstraintComponentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOrConstraintComponentORKeyword_3_0 = (Keyword)cOrConstraintComponentEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNotConstraintComponentEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNotConstraintComponentNOTKeyword_4_0 = (Keyword)cNotConstraintComponentEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPredicatePathEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPredicatePathSOMEKeyword_5_0 = (Keyword)cPredicatePathEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cInversePathEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cInversePathSOMEKeyword_6_0 = (Keyword)cInversePathEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum PropertyType:
		//	MinCountConstraintComponent='MIN' | MaxCountConstraintComponent='MAX' | AndConstraintComponent='AND' |
		//	OrConstraintComponent='OR' | NotConstraintComponent='NOT' | PredicatePath='SOME ' | InversePath='SOME ^';
		public EnumRule getRule() { return rule; }
		
		//MinCountConstraintComponent='MIN' | MaxCountConstraintComponent='MAX' | AndConstraintComponent='AND' |
		//OrConstraintComponent='OR' | NotConstraintComponent='NOT' | PredicatePath='SOME ' | InversePath='SOME ^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MinCountConstraintComponent='MIN'
		public EnumLiteralDeclaration getMinCountConstraintComponentEnumLiteralDeclaration_0() { return cMinCountConstraintComponentEnumLiteralDeclaration_0; }
		
		//'MIN'
		public Keyword getMinCountConstraintComponentMINKeyword_0_0() { return cMinCountConstraintComponentMINKeyword_0_0; }
		
		//MaxCountConstraintComponent='MAX'
		public EnumLiteralDeclaration getMaxCountConstraintComponentEnumLiteralDeclaration_1() { return cMaxCountConstraintComponentEnumLiteralDeclaration_1; }
		
		//'MAX'
		public Keyword getMaxCountConstraintComponentMAXKeyword_1_0() { return cMaxCountConstraintComponentMAXKeyword_1_0; }
		
		//AndConstraintComponent='AND'
		public EnumLiteralDeclaration getAndConstraintComponentEnumLiteralDeclaration_2() { return cAndConstraintComponentEnumLiteralDeclaration_2; }
		
		//'AND'
		public Keyword getAndConstraintComponentANDKeyword_2_0() { return cAndConstraintComponentANDKeyword_2_0; }
		
		//OrConstraintComponent='OR'
		public EnumLiteralDeclaration getOrConstraintComponentEnumLiteralDeclaration_3() { return cOrConstraintComponentEnumLiteralDeclaration_3; }
		
		//'OR'
		public Keyword getOrConstraintComponentORKeyword_3_0() { return cOrConstraintComponentORKeyword_3_0; }
		
		//NotConstraintComponent='NOT'
		public EnumLiteralDeclaration getNotConstraintComponentEnumLiteralDeclaration_4() { return cNotConstraintComponentEnumLiteralDeclaration_4; }
		
		//'NOT'
		public Keyword getNotConstraintComponentNOTKeyword_4_0() { return cNotConstraintComponentNOTKeyword_4_0; }
		
		//PredicatePath='SOME '
		public EnumLiteralDeclaration getPredicatePathEnumLiteralDeclaration_5() { return cPredicatePathEnumLiteralDeclaration_5; }
		
		//'SOME '
		public Keyword getPredicatePathSOMEKeyword_5_0() { return cPredicatePathSOMEKeyword_5_0; }
		
		//InversePath='SOME ^'
		public EnumLiteralDeclaration getInversePathEnumLiteralDeclaration_6() { return cInversePathEnumLiteralDeclaration_6; }
		
		//'SOME ^'
		public Keyword getInversePathSOMEKeyword_6_0() { return cInversePathSOMEKeyword_6_0; }
	}
	
	private final GraphElements pGraph;
	private final ShapesGraphElements pShapesGraph;
	private final TargetElements pTarget;
	private final ShapeConstraintElements pShapeConstraint;
	private final ShapeNameElements pShapeName;
	private final ShapeExpressionElements pShapeExpression;
	private final ValueElements pValue;
	private final PropertyTypeElements ePropertyType;
	private final TerminalRule tUNICODE;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGraph = new GraphElements();
		this.pShapesGraph = new ShapesGraphElements();
		this.pTarget = new TargetElements();
		this.pShapeConstraint = new ShapeConstraintElements();
		this.pShapeName = new ShapeNameElements();
		this.pShapeExpression = new ShapeExpressionElements();
		this.pValue = new ValueElements();
		this.ePropertyType = new PropertyTypeElements();
		this.tUNICODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Simple.UNICODE");
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.magicSHACL.Simple".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Graph:
	//	{Graph} shapesGraph=ShapesGraph;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//ShapesGraph:
	//	{ShapesGraph} shapeConstraints+=ShapeConstraint*;
	public ShapesGraphElements getShapesGraphAccess() {
		return pShapesGraph;
	}
	
	public ParserRule getShapesGraphRule() {
		return getShapesGraphAccess().getRule();
	}
	
	//Target:
	//	{Target}
	//	'(' term=UNICODE ')';
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//ShapeConstraint:
	//	{ShapeConstraint} shapeName=ShapeName (targets+=Target '?' | ':-' shapeExpressions+=ShapeExpression ';');
	public ShapeConstraintElements getShapeConstraintAccess() {
		return pShapeConstraint;
	}
	
	public ParserRule getShapeConstraintRule() {
		return getShapeConstraintAccess().getRule();
	}
	
	//ShapeName:
	//	{ShapeName} name=UNICODE;
	public ShapeNameElements getShapeNameAccess() {
		return pShapeName;
	}
	
	public ParserRule getShapeNameRule() {
		return getShapeNameAccess().getRule();
	}
	
	//ShapeExpression:
	//	{ShapeExpression} (type=PropertyType values+=Value*) | values+=Value (type=PropertyType values+=Value)*;
	public ShapeExpressionElements getShapeExpressionAccess() {
		return pShapeExpression;
	}
	
	public ParserRule getShapeExpressionRule() {
		return getShapeExpressionAccess().getRule();
	}
	
	//Value:
	//	{Value} name=UNICODE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//enum PropertyType:
	//	MinCountConstraintComponent='MIN' | MaxCountConstraintComponent='MAX' | AndConstraintComponent='AND' |
	//	OrConstraintComponent='OR' | NotConstraintComponent='NOT' | PredicatePath='SOME ' | InversePath='SOME ^';
	public PropertyTypeElements getPropertyTypeAccess() {
		return ePropertyType;
	}
	
	public EnumRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//terminal UNICODE:
	//	'^'? ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | ':' | '#' | '/' | '.' | '-' | '\"' | '{' | '}' | '\\' | '$')*;
	public TerminalRule getUNICODERule() {
		return tUNICODE;
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
