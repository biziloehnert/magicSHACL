/*
 * generated by Xtext 2.24.0
 */
package xtext.magicSHACL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TurtleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamespacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespacesNamespaceParserRuleCall_1_0 = (RuleCall)cNamespacesAssignment_1.eContents().get(0);
		private final Assignment cDataGraphAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataGraphDataGraphParserRuleCall_2_0 = (RuleCall)cDataGraphAssignment_2.eContents().get(0);
		private final Assignment cShapesGraphAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShapesGraphShapesGraphParserRuleCall_3_0 = (RuleCall)cShapesGraphAssignment_3.eContents().get(0);
		
		//Graph:
		//	{Graph} namespaces+=Namespace*
		//	dataGraph=DataGraph
		//	shapesGraph=ShapesGraph;
		@Override public ParserRule getRule() { return rule; }
		
		//{Graph} namespaces+=Namespace*
		//dataGraph=DataGraph
		//shapesGraph=ShapesGraph
		public Group getGroup() { return cGroup; }
		
		//{Graph}
		public Action getGraphAction_0() { return cGraphAction_0; }
		
		//namespaces+=Namespace*
		public Assignment getNamespacesAssignment_1() { return cNamespacesAssignment_1; }
		
		//Namespace
		public RuleCall getNamespacesNamespaceParserRuleCall_1_0() { return cNamespacesNamespaceParserRuleCall_1_0; }
		
		//dataGraph=DataGraph
		public Assignment getDataGraphAssignment_2() { return cDataGraphAssignment_2; }
		
		//DataGraph
		public RuleCall getDataGraphDataGraphParserRuleCall_2_0() { return cDataGraphDataGraphParserRuleCall_2_0; }
		
		//shapesGraph=ShapesGraph
		public Assignment getShapesGraphAssignment_3() { return cShapesGraphAssignment_3; }
		
		//ShapesGraph
		public RuleCall getShapesGraphShapesGraphParserRuleCall_3_0() { return cShapesGraphShapesGraphParserRuleCall_3_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Assignment cNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamespaceIRITerminalRuleCall_2_0 = (RuleCall)cNamespaceAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Namespace:
		//	'@prefix' prefix=ID namespace=IRI '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'@prefix' prefix=ID namespace=IRI '.'
		public Group getGroup() { return cGroup; }
		
		//'@prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_0() { return cPrefixIDTerminalRuleCall_1_0; }
		
		//namespace=IRI
		public Assignment getNamespaceAssignment_2() { return cNamespaceAssignment_2; }
		
		//IRI
		public RuleCall getNamespaceIRITerminalRuleCall_2_0() { return cNamespaceIRITerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class DataGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.DataGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTriplesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriplesTriplesParserRuleCall_1_0 = (RuleCall)cTriplesAssignment_1.eContents().get(0);
		
		//DataGraph:
		//	{DataGraph} triples+=Triples*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataGraph} triples+=Triples*
		public Group getGroup() { return cGroup; }
		
		//{DataGraph}
		public Action getDataGraphAction_0() { return cDataGraphAction_0; }
		
		//triples+=Triples*
		public Assignment getTriplesAssignment_1() { return cTriplesAssignment_1; }
		
		//Triples
		public RuleCall getTriplesTriplesParserRuleCall_1_0() { return cTriplesTriplesParserRuleCall_1_0; }
	}
	public class TriplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Triples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectSubjectParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Assignment cPredicateobjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateobjectPredicateObjectParserRuleCall_1_0 = (RuleCall)cPredicateobjectAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Triples:
		//	subject=Subject
		//	predicateobject+=PredicateObject*
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//subject=Subject
		//predicateobject+=PredicateObject*
		//'.'
		public Group getGroup() { return cGroup; }
		
		//subject=Subject
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }
		
		//Subject
		public RuleCall getSubjectSubjectParserRuleCall_0_0() { return cSubjectSubjectParserRuleCall_0_0; }
		
		//predicateobject+=PredicateObject*
		public Assignment getPredicateobjectAssignment_1() { return cPredicateobjectAssignment_1; }
		
		//PredicateObject
		public RuleCall getPredicateobjectPredicateObjectParserRuleCall_1_0() { return cPredicateobjectPredicateObjectParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class PredicateObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.PredicateObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0_0 = (RuleCall)cPredicateAssignment_0_0.eContents().get(0);
		private final Assignment cObjectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_0_1_0 = (RuleCall)cObjectAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PredicateObject:
		//	(predicate=Predicate object=Object) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(predicate=Predicate object=Object) ';'
		public Group getGroup() { return cGroup; }
		
		//(predicate=Predicate object=Object)
		public Group getGroup_0() { return cGroup_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0_0() { return cPredicateAssignment_0_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0_0() { return cPredicatePredicateParserRuleCall_0_0_0; }
		
		//object=Object
		public Assignment getObjectAssignment_0_1() { return cObjectAssignment_0_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_0_1_0() { return cObjectObjectParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Subject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Subject:
		//	{Subject} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Subject} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Subject}
		public Action getSubjectAction_0() { return cSubjectAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Predicate:
		//	{Predicate} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Predicate} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Predicate}
		public Action getPredicateAction_0() { return cPredicateAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXsdTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXsdTypeEStringParserRuleCall_2_1_0 = (RuleCall)cXsdTypeAssignment_2_1.eContents().get(0);
		
		//Object:
		//	{Object} name=EString ('^^'xsdType=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} name=EString ('^^'xsdType=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('^^'xsdType=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_2_0() { return cCircumflexAccentCircumflexAccentKeyword_2_0; }
		
		//xsdType=EString
		public Assignment getXsdTypeAssignment_2_1() { return cXsdTypeAssignment_2_1; }
		
		//EString
		public RuleCall getXsdTypeEStringParserRuleCall_2_1_0() { return cXsdTypeEStringParserRuleCall_2_1_0; }
	}
	public class ShapesGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.ShapesGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapesGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShapeConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeConstraintsShapeConstraintParserRuleCall_1_0 = (RuleCall)cShapeConstraintsAssignment_1.eContents().get(0);
		
		//ShapesGraph:
		//	{ShapesGraph} shapeConstraints+=ShapeConstraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapesGraph} shapeConstraints+=ShapeConstraint*
		public Group getGroup() { return cGroup; }
		
		//{ShapesGraph}
		public Action getShapesGraphAction_0() { return cShapesGraphAction_0; }
		
		//shapeConstraints+=ShapeConstraint*
		public Assignment getShapeConstraintsAssignment_1() { return cShapeConstraintsAssignment_1; }
		
		//ShapeConstraint
		public RuleCall getShapeConstraintsShapeConstraintParserRuleCall_1_0() { return cShapeConstraintsShapeConstraintParserRuleCall_1_0; }
	}
	public class ShapeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.ShapeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShapeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeNameShapeNameParserRuleCall_1_0 = (RuleCall)cShapeNameAssignment_1.eContents().get(0);
		private final Assignment cShapeExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cShapeExpressionsShapeExpressionParserRuleCall_2_0 = (RuleCall)cShapeExpressionsAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ShapeConstraint:
		//	{ShapeConstraint} shapeName=ShapeName
		//	shapeExpressions+=ShapeExpression+
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeConstraint} shapeName=ShapeName
		//shapeExpressions+=ShapeExpression+
		//'.'
		public Group getGroup() { return cGroup; }
		
		//{ShapeConstraint}
		public Action getShapeConstraintAction_0() { return cShapeConstraintAction_0; }
		
		//shapeName=ShapeName
		public Assignment getShapeNameAssignment_1() { return cShapeNameAssignment_1; }
		
		//ShapeName
		public RuleCall getShapeNameShapeNameParserRuleCall_1_0() { return cShapeNameShapeNameParserRuleCall_1_0; }
		
		//shapeExpressions+=ShapeExpression+
		public Assignment getShapeExpressionsAssignment_2() { return cShapeExpressionsAssignment_2; }
		
		//ShapeExpression
		public RuleCall getShapeExpressionsShapeExpressionParserRuleCall_2_0() { return cShapeExpressionsShapeExpressionParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class ShapeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.ShapeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ShapeName:
		//	{ShapeName} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeName} name=EString
		public Group getGroup() { return cGroup; }
		
		//{ShapeName}
		public Action getShapeNameAction_0() { return cShapeNameAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ShapeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.ShapeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cShapeExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cShNodeShapeKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypePropertyTypeEnumRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cValuesAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_1_2_0_0 = (RuleCall)cValuesAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cShapeExpressionsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cShapeExpressionsShapeExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cShapeExpressionsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1_2 = (Keyword)cGroup_1_2_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ShapeExpression:
		//	{ShapeExpression} (ID 'sh:NodeShape' ';') | type=PropertyType '('? (values+=Value | '['
		//	shapeExpressions+=ShapeExpression* ']')* ')'? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeExpression} (ID 'sh:NodeShape' ';') | type=PropertyType '('? (values+=Value | '[' shapeExpressions+=ShapeExpression
		//* ']')* ')'? ';'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ShapeExpression} (ID 'sh:NodeShape' ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//{ShapeExpression}
		public Action getShapeExpressionAction_0_0() { return cShapeExpressionAction_0_0; }
		
		//(ID 'sh:NodeShape' ';')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_0() { return cIDTerminalRuleCall_0_1_0; }
		
		//'sh:NodeShape'
		public Keyword getShNodeShapeKeyword_0_1_1() { return cShNodeShapeKeyword_0_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1_2() { return cSemicolonKeyword_0_1_2; }
		
		//type=PropertyType '('? (values+=Value | '[' shapeExpressions+=ShapeExpression* ']')* ')'? ';'?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=PropertyType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//PropertyType
		public RuleCall getTypePropertyTypeEnumRuleCall_1_0_0() { return cTypePropertyTypeEnumRuleCall_1_0_0; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(values+=Value | '[' shapeExpressions+=ShapeExpression* ']')*
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_2_0() { return cValuesAssignment_1_2_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_2_0_0() { return cValuesValueParserRuleCall_1_2_0_0; }
		
		//'[' shapeExpressions+=ShapeExpression* ']'
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_1_0() { return cLeftSquareBracketKeyword_1_2_1_0; }
		
		//shapeExpressions+=ShapeExpression*
		public Assignment getShapeExpressionsAssignment_1_2_1_1() { return cShapeExpressionsAssignment_1_2_1_1; }
		
		//ShapeExpression
		public RuleCall getShapeExpressionsShapeExpressionParserRuleCall_1_2_1_1_0() { return cShapeExpressionsShapeExpressionParserRuleCall_1_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_1_2() { return cRightSquareBracketKeyword_1_2_1_2; }
		
		//')'?
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXsdTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXsdTypeEStringParserRuleCall_2_1_0 = (RuleCall)cXsdTypeAssignment_2_1.eContents().get(0);
		
		//Value:
		//	{Value} name=EString ('^^' xsdType=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} name=EString ('^^' xsdType=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('^^' xsdType=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_2_0() { return cCircumflexAccentCircumflexAccentKeyword_2_0; }
		
		//xsdType=EString
		public Assignment getXsdTypeAssignment_2_1() { return cXsdTypeAssignment_2_1; }
		
		//EString
		public RuleCall getXsdTypeEStringParserRuleCall_2_1_0() { return cXsdTypeEStringParserRuleCall_2_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class PropertyTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.PropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinCountConstraintComponentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinCountConstraintComponentShMinCountKeyword_0_0 = (Keyword)cMinCountConstraintComponentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxCountConstraintComponentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxCountConstraintComponentShMaxCountKeyword_1_0 = (Keyword)cMaxCountConstraintComponentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAndConstraintComponentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAndConstraintComponentShAndKeyword_2_0 = (Keyword)cAndConstraintComponentEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOrConstraintComponentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOrConstraintComponentShOrKeyword_3_0 = (Keyword)cOrConstraintComponentEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNotConstraintComponentEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNotConstraintComponentShNotKeyword_4_0 = (Keyword)cNotConstraintComponentEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cClassConstraintComponentEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cClassConstraintComponentShClassKeyword_5_0 = (Keyword)cClassConstraintComponentEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cHasValueConstraintComponentEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cHasValueConstraintComponentShHasValueKeyword_6_0 = (Keyword)cHasValueConstraintComponentEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNodeKindConstraintComponentEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNodeKindConstraintComponentShNodeKindKeyword_7_0 = (Keyword)cNodeKindConstraintComponentEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNodeConstraintComponentEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNodeConstraintComponentShNodeKeyword_8_0 = (Keyword)cNodeConstraintComponentEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDatatypeConstraintComponentEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDatatypeConstraintComponentShDatatypeKeyword_9_0 = (Keyword)cDatatypeConstraintComponentEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPatternConstraintComponentEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPatternConstraintComponentShPatternKeyword_10_0 = (Keyword)cPatternConstraintComponentEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cClosedConstraintComponentEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cClosedConstraintComponentShClosedKeyword_11_0 = (Keyword)cClosedConstraintComponentEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cClosedConstraintComponent_ignoreEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cClosedConstraintComponent_ignoreShIgnoredPropertiesKeyword_12_0 = (Keyword)cClosedConstraintComponent_ignoreEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cPredicatePathEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cPredicatePathShPathKeyword_13_0 = (Keyword)cPredicatePathEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cInversePathEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cInversePathShInversePathKeyword_14_0 = (Keyword)cInversePathEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cPropertyEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cPropertyShPropertyKeyword_15_0 = (Keyword)cPropertyEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cNameEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cNameShNameKeyword_16_0 = (Keyword)cNameEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cTargetClassEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cTargetClassShTargetClassKeyword_17_0 = (Keyword)cTargetClassEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cTargetNodeEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cTargetNodeShTargetNodeKeyword_18_0 = (Keyword)cTargetNodeEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cMessageEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cMessageShMessageKeyword_19_0 = (Keyword)cMessageEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cMinExclusiveConstraintComponentEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cMinExclusiveConstraintComponentShMinExclusiveKeyword_20_0 = (Keyword)cMinExclusiveConstraintComponentEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cMinInclusiveConstraintComponentEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cMinInclusiveConstraintComponentShMinInclusiveKeyword_21_0 = (Keyword)cMinInclusiveConstraintComponentEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cMaxExclusiveConstraintComponentEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cMaxExclusiveConstraintComponentShMaxExclusiveKeyword_22_0 = (Keyword)cMaxExclusiveConstraintComponentEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cMaxInclusiveConstraintComponentEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cMaxInclusiveConstraintComponentShMaxInclusiveKeyword_23_0 = (Keyword)cMaxInclusiveConstraintComponentEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cMaxLengthConstraintComponentEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cMaxLengthConstraintComponentShMaxLengthKeyword_24_0 = (Keyword)cMaxLengthConstraintComponentEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cMinLengthConstraintComponentEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cMinLengthConstraintComponentShMinLengthKeyword_25_0 = (Keyword)cMinLengthConstraintComponentEnumLiteralDeclaration_25.eContents().get(0);
		
		//enum PropertyType:
		//	MinCountConstraintComponent='sh:minCount' | MaxCountConstraintComponent='sh:maxCount' |
		//	AndConstraintComponent='sh:and' | OrConstraintComponent='sh:or' | NotConstraintComponent='sh:not' |
		//	ClassConstraintComponent="sh:class" | HasValueConstraintComponent='sh:hasValue' |
		//	NodeKindConstraintComponent='sh:nodeKind' | NodeConstraintComponent='sh:node' |
		//	DatatypeConstraintComponent='sh:datatype' | PatternConstraintComponent='sh:pattern' |
		//	ClosedConstraintComponent='sh:closed' | ClosedConstraintComponent_ignore='sh:ignoredProperties' |
		//	PredicatePath='sh:path' | InversePath='sh:inversePath' | Property='sh:property' | Name='sh:name' |
		//	TargetClass='sh:targetClass' | TargetNode='sh:targetNode' | Message='sh:message' |
		//	MinExclusiveConstraintComponent='sh:minExclusive' | MinInclusiveConstraintComponent='sh:minInclusive' |
		//	MaxExclusiveConstraintComponent='sh:maxExclusive' | MaxInclusiveConstraintComponent='sh:maxInclusive' |
		//	MaxLengthConstraintComponent='sh:maxLength' | MinLengthConstraintComponent='sh:minLength';
		public EnumRule getRule() { return rule; }
		
		//MinCountConstraintComponent='sh:minCount' | MaxCountConstraintComponent='sh:maxCount' |
		//AndConstraintComponent='sh:and' | OrConstraintComponent='sh:or' | NotConstraintComponent='sh:not' |
		//ClassConstraintComponent="sh:class" | HasValueConstraintComponent='sh:hasValue' |
		//NodeKindConstraintComponent='sh:nodeKind' | NodeConstraintComponent='sh:node' |
		//DatatypeConstraintComponent='sh:datatype' | PatternConstraintComponent='sh:pattern' |
		//ClosedConstraintComponent='sh:closed' | ClosedConstraintComponent_ignore='sh:ignoredProperties' |
		//PredicatePath='sh:path' | InversePath='sh:inversePath' | Property='sh:property' | Name='sh:name' |
		//TargetClass='sh:targetClass' | TargetNode='sh:targetNode' | Message='sh:message' |
		//MinExclusiveConstraintComponent='sh:minExclusive' | MinInclusiveConstraintComponent='sh:minInclusive' |
		//MaxExclusiveConstraintComponent='sh:maxExclusive' | MaxInclusiveConstraintComponent='sh:maxInclusive' |
		//MaxLengthConstraintComponent='sh:maxLength' | MinLengthConstraintComponent='sh:minLength'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MinCountConstraintComponent='sh:minCount'
		public EnumLiteralDeclaration getMinCountConstraintComponentEnumLiteralDeclaration_0() { return cMinCountConstraintComponentEnumLiteralDeclaration_0; }
		
		//'sh:minCount'
		public Keyword getMinCountConstraintComponentShMinCountKeyword_0_0() { return cMinCountConstraintComponentShMinCountKeyword_0_0; }
		
		//MaxCountConstraintComponent='sh:maxCount'
		public EnumLiteralDeclaration getMaxCountConstraintComponentEnumLiteralDeclaration_1() { return cMaxCountConstraintComponentEnumLiteralDeclaration_1; }
		
		//'sh:maxCount'
		public Keyword getMaxCountConstraintComponentShMaxCountKeyword_1_0() { return cMaxCountConstraintComponentShMaxCountKeyword_1_0; }
		
		//AndConstraintComponent='sh:and'
		public EnumLiteralDeclaration getAndConstraintComponentEnumLiteralDeclaration_2() { return cAndConstraintComponentEnumLiteralDeclaration_2; }
		
		//'sh:and'
		public Keyword getAndConstraintComponentShAndKeyword_2_0() { return cAndConstraintComponentShAndKeyword_2_0; }
		
		//OrConstraintComponent='sh:or'
		public EnumLiteralDeclaration getOrConstraintComponentEnumLiteralDeclaration_3() { return cOrConstraintComponentEnumLiteralDeclaration_3; }
		
		//'sh:or'
		public Keyword getOrConstraintComponentShOrKeyword_3_0() { return cOrConstraintComponentShOrKeyword_3_0; }
		
		//NotConstraintComponent='sh:not'
		public EnumLiteralDeclaration getNotConstraintComponentEnumLiteralDeclaration_4() { return cNotConstraintComponentEnumLiteralDeclaration_4; }
		
		//'sh:not'
		public Keyword getNotConstraintComponentShNotKeyword_4_0() { return cNotConstraintComponentShNotKeyword_4_0; }
		
		//ClassConstraintComponent="sh:class"
		public EnumLiteralDeclaration getClassConstraintComponentEnumLiteralDeclaration_5() { return cClassConstraintComponentEnumLiteralDeclaration_5; }
		
		//"sh:class"
		public Keyword getClassConstraintComponentShClassKeyword_5_0() { return cClassConstraintComponentShClassKeyword_5_0; }
		
		//HasValueConstraintComponent='sh:hasValue'
		public EnumLiteralDeclaration getHasValueConstraintComponentEnumLiteralDeclaration_6() { return cHasValueConstraintComponentEnumLiteralDeclaration_6; }
		
		//'sh:hasValue'
		public Keyword getHasValueConstraintComponentShHasValueKeyword_6_0() { return cHasValueConstraintComponentShHasValueKeyword_6_0; }
		
		//NodeKindConstraintComponent='sh:nodeKind'
		public EnumLiteralDeclaration getNodeKindConstraintComponentEnumLiteralDeclaration_7() { return cNodeKindConstraintComponentEnumLiteralDeclaration_7; }
		
		//'sh:nodeKind'
		public Keyword getNodeKindConstraintComponentShNodeKindKeyword_7_0() { return cNodeKindConstraintComponentShNodeKindKeyword_7_0; }
		
		//NodeConstraintComponent='sh:node'
		public EnumLiteralDeclaration getNodeConstraintComponentEnumLiteralDeclaration_8() { return cNodeConstraintComponentEnumLiteralDeclaration_8; }
		
		//'sh:node'
		public Keyword getNodeConstraintComponentShNodeKeyword_8_0() { return cNodeConstraintComponentShNodeKeyword_8_0; }
		
		//DatatypeConstraintComponent='sh:datatype'
		public EnumLiteralDeclaration getDatatypeConstraintComponentEnumLiteralDeclaration_9() { return cDatatypeConstraintComponentEnumLiteralDeclaration_9; }
		
		//'sh:datatype'
		public Keyword getDatatypeConstraintComponentShDatatypeKeyword_9_0() { return cDatatypeConstraintComponentShDatatypeKeyword_9_0; }
		
		//PatternConstraintComponent='sh:pattern'
		public EnumLiteralDeclaration getPatternConstraintComponentEnumLiteralDeclaration_10() { return cPatternConstraintComponentEnumLiteralDeclaration_10; }
		
		//'sh:pattern'
		public Keyword getPatternConstraintComponentShPatternKeyword_10_0() { return cPatternConstraintComponentShPatternKeyword_10_0; }
		
		//ClosedConstraintComponent='sh:closed'
		public EnumLiteralDeclaration getClosedConstraintComponentEnumLiteralDeclaration_11() { return cClosedConstraintComponentEnumLiteralDeclaration_11; }
		
		//'sh:closed'
		public Keyword getClosedConstraintComponentShClosedKeyword_11_0() { return cClosedConstraintComponentShClosedKeyword_11_0; }
		
		//ClosedConstraintComponent_ignore='sh:ignoredProperties'
		public EnumLiteralDeclaration getClosedConstraintComponent_ignoreEnumLiteralDeclaration_12() { return cClosedConstraintComponent_ignoreEnumLiteralDeclaration_12; }
		
		//'sh:ignoredProperties'
		public Keyword getClosedConstraintComponent_ignoreShIgnoredPropertiesKeyword_12_0() { return cClosedConstraintComponent_ignoreShIgnoredPropertiesKeyword_12_0; }
		
		//PredicatePath='sh:path'
		public EnumLiteralDeclaration getPredicatePathEnumLiteralDeclaration_13() { return cPredicatePathEnumLiteralDeclaration_13; }
		
		//'sh:path'
		public Keyword getPredicatePathShPathKeyword_13_0() { return cPredicatePathShPathKeyword_13_0; }
		
		//InversePath='sh:inversePath'
		public EnumLiteralDeclaration getInversePathEnumLiteralDeclaration_14() { return cInversePathEnumLiteralDeclaration_14; }
		
		//'sh:inversePath'
		public Keyword getInversePathShInversePathKeyword_14_0() { return cInversePathShInversePathKeyword_14_0; }
		
		//Property='sh:property'
		public EnumLiteralDeclaration getPropertyEnumLiteralDeclaration_15() { return cPropertyEnumLiteralDeclaration_15; }
		
		//'sh:property'
		public Keyword getPropertyShPropertyKeyword_15_0() { return cPropertyShPropertyKeyword_15_0; }
		
		//Name='sh:name'
		public EnumLiteralDeclaration getNameEnumLiteralDeclaration_16() { return cNameEnumLiteralDeclaration_16; }
		
		//'sh:name'
		public Keyword getNameShNameKeyword_16_0() { return cNameShNameKeyword_16_0; }
		
		//TargetClass='sh:targetClass'
		public EnumLiteralDeclaration getTargetClassEnumLiteralDeclaration_17() { return cTargetClassEnumLiteralDeclaration_17; }
		
		//'sh:targetClass'
		public Keyword getTargetClassShTargetClassKeyword_17_0() { return cTargetClassShTargetClassKeyword_17_0; }
		
		//TargetNode='sh:targetNode'
		public EnumLiteralDeclaration getTargetNodeEnumLiteralDeclaration_18() { return cTargetNodeEnumLiteralDeclaration_18; }
		
		//'sh:targetNode'
		public Keyword getTargetNodeShTargetNodeKeyword_18_0() { return cTargetNodeShTargetNodeKeyword_18_0; }
		
		//Message='sh:message'
		public EnumLiteralDeclaration getMessageEnumLiteralDeclaration_19() { return cMessageEnumLiteralDeclaration_19; }
		
		//'sh:message'
		public Keyword getMessageShMessageKeyword_19_0() { return cMessageShMessageKeyword_19_0; }
		
		//MinExclusiveConstraintComponent='sh:minExclusive'
		public EnumLiteralDeclaration getMinExclusiveConstraintComponentEnumLiteralDeclaration_20() { return cMinExclusiveConstraintComponentEnumLiteralDeclaration_20; }
		
		//'sh:minExclusive'
		public Keyword getMinExclusiveConstraintComponentShMinExclusiveKeyword_20_0() { return cMinExclusiveConstraintComponentShMinExclusiveKeyword_20_0; }
		
		//MinInclusiveConstraintComponent='sh:minInclusive'
		public EnumLiteralDeclaration getMinInclusiveConstraintComponentEnumLiteralDeclaration_21() { return cMinInclusiveConstraintComponentEnumLiteralDeclaration_21; }
		
		//'sh:minInclusive'
		public Keyword getMinInclusiveConstraintComponentShMinInclusiveKeyword_21_0() { return cMinInclusiveConstraintComponentShMinInclusiveKeyword_21_0; }
		
		//MaxExclusiveConstraintComponent='sh:maxExclusive'
		public EnumLiteralDeclaration getMaxExclusiveConstraintComponentEnumLiteralDeclaration_22() { return cMaxExclusiveConstraintComponentEnumLiteralDeclaration_22; }
		
		//'sh:maxExclusive'
		public Keyword getMaxExclusiveConstraintComponentShMaxExclusiveKeyword_22_0() { return cMaxExclusiveConstraintComponentShMaxExclusiveKeyword_22_0; }
		
		//MaxInclusiveConstraintComponent='sh:maxInclusive'
		public EnumLiteralDeclaration getMaxInclusiveConstraintComponentEnumLiteralDeclaration_23() { return cMaxInclusiveConstraintComponentEnumLiteralDeclaration_23; }
		
		//'sh:maxInclusive'
		public Keyword getMaxInclusiveConstraintComponentShMaxInclusiveKeyword_23_0() { return cMaxInclusiveConstraintComponentShMaxInclusiveKeyword_23_0; }
		
		//MaxLengthConstraintComponent='sh:maxLength'
		public EnumLiteralDeclaration getMaxLengthConstraintComponentEnumLiteralDeclaration_24() { return cMaxLengthConstraintComponentEnumLiteralDeclaration_24; }
		
		//'sh:maxLength'
		public Keyword getMaxLengthConstraintComponentShMaxLengthKeyword_24_0() { return cMaxLengthConstraintComponentShMaxLengthKeyword_24_0; }
		
		//MinLengthConstraintComponent='sh:minLength'
		public EnumLiteralDeclaration getMinLengthConstraintComponentEnumLiteralDeclaration_25() { return cMinLengthConstraintComponentEnumLiteralDeclaration_25; }
		
		//'sh:minLength'
		public Keyword getMinLengthConstraintComponentShMinLengthKeyword_25_0() { return cMinLengthConstraintComponentShMinLengthKeyword_25_0; }
	}
	
	private final GraphElements pGraph;
	private final NamespaceElements pNamespace;
	private final DataGraphElements pDataGraph;
	private final TriplesElements pTriples;
	private final PredicateObjectElements pPredicateObject;
	private final SubjectElements pSubject;
	private final PredicateElements pPredicate;
	private final ObjectElements pObject;
	private final ShapesGraphElements pShapesGraph;
	private final ShapeConstraintElements pShapeConstraint;
	private final ShapeNameElements pShapeName;
	private final ShapeExpressionElements pShapeExpression;
	private final ValueElements pValue;
	private final PropertyTypeElements ePropertyType;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tIRI;
	private final TerminalRule tID;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TurtleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGraph = new GraphElements();
		this.pNamespace = new NamespaceElements();
		this.pDataGraph = new DataGraphElements();
		this.pTriples = new TriplesElements();
		this.pPredicateObject = new PredicateObjectElements();
		this.pSubject = new SubjectElements();
		this.pPredicate = new PredicateElements();
		this.pObject = new ObjectElements();
		this.pShapesGraph = new ShapesGraphElements();
		this.pShapeConstraint = new ShapeConstraintElements();
		this.pShapeName = new ShapeNameElements();
		this.pShapeExpression = new ShapeExpressionElements();
		this.pValue = new ValueElements();
		this.ePropertyType = new PropertyTypeElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.SL_COMMENT");
		this.tIRI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.IRI");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.magicSHACL.Turtle.ID");
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.magicSHACL.Turtle".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Graph:
	//	{Graph} namespaces+=Namespace*
	//	dataGraph=DataGraph
	//	shapesGraph=ShapesGraph;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//Namespace:
	//	'@prefix' prefix=ID namespace=IRI '.';
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//DataGraph:
	//	{DataGraph} triples+=Triples*;
	public DataGraphElements getDataGraphAccess() {
		return pDataGraph;
	}
	
	public ParserRule getDataGraphRule() {
		return getDataGraphAccess().getRule();
	}
	
	//Triples:
	//	subject=Subject
	//	predicateobject+=PredicateObject*
	//	'.';
	public TriplesElements getTriplesAccess() {
		return pTriples;
	}
	
	public ParserRule getTriplesRule() {
		return getTriplesAccess().getRule();
	}
	
	//PredicateObject:
	//	(predicate=Predicate object=Object) ';';
	public PredicateObjectElements getPredicateObjectAccess() {
		return pPredicateObject;
	}
	
	public ParserRule getPredicateObjectRule() {
		return getPredicateObjectAccess().getRule();
	}
	
	//Subject:
	//	{Subject} name=EString;
	public SubjectElements getSubjectAccess() {
		return pSubject;
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}
	
	//Predicate:
	//	{Predicate} name=EString;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Object:
	//	{Object} name=EString ('^^'xsdType=EString)?;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//ShapesGraph:
	//	{ShapesGraph} shapeConstraints+=ShapeConstraint*;
	public ShapesGraphElements getShapesGraphAccess() {
		return pShapesGraph;
	}
	
	public ParserRule getShapesGraphRule() {
		return getShapesGraphAccess().getRule();
	}
	
	//ShapeConstraint:
	//	{ShapeConstraint} shapeName=ShapeName
	//	shapeExpressions+=ShapeExpression+
	//	'.';
	public ShapeConstraintElements getShapeConstraintAccess() {
		return pShapeConstraint;
	}
	
	public ParserRule getShapeConstraintRule() {
		return getShapeConstraintAccess().getRule();
	}
	
	//ShapeName:
	//	{ShapeName} name=EString;
	public ShapeNameElements getShapeNameAccess() {
		return pShapeName;
	}
	
	public ParserRule getShapeNameRule() {
		return getShapeNameAccess().getRule();
	}
	
	//ShapeExpression:
	//	{ShapeExpression} (ID 'sh:NodeShape' ';') | type=PropertyType '('? (values+=Value | '['
	//	shapeExpressions+=ShapeExpression* ']')* ')'? ';'?;
	public ShapeExpressionElements getShapeExpressionAccess() {
		return pShapeExpression;
	}
	
	public ParserRule getShapeExpressionRule() {
		return getShapeExpressionAccess().getRule();
	}
	
	//Value:
	//	{Value} name=EString ('^^' xsdType=EString)?;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//enum PropertyType:
	//	MinCountConstraintComponent='sh:minCount' | MaxCountConstraintComponent='sh:maxCount' |
	//	AndConstraintComponent='sh:and' | OrConstraintComponent='sh:or' | NotConstraintComponent='sh:not' |
	//	ClassConstraintComponent="sh:class" | HasValueConstraintComponent='sh:hasValue' |
	//	NodeKindConstraintComponent='sh:nodeKind' | NodeConstraintComponent='sh:node' |
	//	DatatypeConstraintComponent='sh:datatype' | PatternConstraintComponent='sh:pattern' |
	//	ClosedConstraintComponent='sh:closed' | ClosedConstraintComponent_ignore='sh:ignoredProperties' |
	//	PredicatePath='sh:path' | InversePath='sh:inversePath' | Property='sh:property' | Name='sh:name' |
	//	TargetClass='sh:targetClass' | TargetNode='sh:targetNode' | Message='sh:message' |
	//	MinExclusiveConstraintComponent='sh:minExclusive' | MinInclusiveConstraintComponent='sh:minInclusive' |
	//	MaxExclusiveConstraintComponent='sh:maxExclusive' | MaxInclusiveConstraintComponent='sh:maxInclusive' |
	//	MaxLengthConstraintComponent='sh:maxLength' | MinLengthConstraintComponent='sh:minLength';
	public PropertyTypeElements getPropertyTypeAccess() {
		return ePropertyType;
	}
	
	public EnumRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	('#' | '//') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal IRI:
	//	'<' !('<' | '>' | '"' | '{' | '}' | '|' | '^' | '`' | '\\' | '\\u0000'..'\\u0020')* '>';
	public TerminalRule getIRIRule() {
		return tIRI;
	}
	
	//@Override
	//terminal ID:
	//	'a'..'z' | 'A'..'Z' | '_' | '0'..'9' ('.''0'..'9')? | ':' | '-'*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
