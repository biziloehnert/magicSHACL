/*
 * generated by Xtext 2.24.0
 */
package xtext.magicSHACL.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xtext.magicSHACL.services.TurtleGrammarAccess;

@SuppressWarnings("all")
public class TurtleSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TurtleGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ShapeExpression_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_Value_IDTerminalRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TurtleGrammarAccess) access;
		match_ShapeExpression_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_2());
		match_Value_IDTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getValueAccess().getIDTerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * @Override 
	 * terminal ID:
	 *     '@'?('a'..'z'|'A'..'Z'|'_'|'0'..'9'('.''0'..'9')?|':'|'-')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ShapeExpression_SemicolonKeyword_2_q.equals(syntax))
				emit_ShapeExpression_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Value_IDTerminalRuleCall_2_q.equals(syntax))
				emit_Value_IDTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' ']' (ambiguity) (rule start)
	 *     shapeExpressions+=ShapeExpression ')' (ambiguity) (rule end)
	 *     shapeExpressions+=ShapeExpression ']' (ambiguity) (rule end)
	 *     type=PropertyType '(' ')' (ambiguity) (rule end)
	 *     type=PropertyType '[' ']' (ambiguity) (rule end)
	 *     values+=Value ')' (ambiguity) (rule end)
	 *     values+=Value (ambiguity) (rule end)
	 */
	protected void emit_ShapeExpression_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString (ambiguity) '^^' xsdType=EString
	 *     name=EString (ambiguity) (rule end)
	 *     name=IRI (ambiguity) '^^' xsdType=EString
	 *     name=IRI (ambiguity) (rule end)
	 */
	protected void emit_Value_IDTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
