/*
 * generated by Xtext 2.24.0
 */
package xtext.magicSHACL.serializer;

import com.google.inject.Inject;
import java.util.Set;
import magicSHACL.Graph;
import magicSHACL.MagicSHACLPackage;
import magicSHACL.Property;
import magicSHACL.PropertyValues;
import magicSHACL.ShapeConstraint;
import magicSHACL.ShapeExpression;
import magicSHACL.ShapeName;
import magicSHACL.ShapesGraph;
import magicSHACL.Value;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.magicSHACL.services.SimpleGrammarAccess;

@SuppressWarnings("all")
public class SimpleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MagicSHACLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MagicSHACLPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case MagicSHACLPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case MagicSHACLPackage.PROPERTY_VALUES:
				sequence_PropertyValues(context, (PropertyValues) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_CONSTRAINT:
				sequence_ShapeConstraint(context, (ShapeConstraint) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_EXPRESSION:
				sequence_ShapeExpression(context, (ShapeExpression) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_NAME:
				sequence_ShapeName(context, (ShapeName) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPES_GRAPH:
				sequence_ShapesGraph(context, (ShapesGraph) semanticObject); 
				return; 
			case MagicSHACLPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Graph returns Graph
	 *
	 * Constraint:
	 *     shapesGraph=ShapesGraph
	 */
	protected void sequence_Graph(ISerializationContext context, Graph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.GRAPH__SHAPES_GRAPH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.GRAPH__SHAPES_GRAPH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_1_0(), semanticObject.getShapesGraph());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyValues returns PropertyValues
	 *
	 * Constraint:
	 *     (values+=Value? property=Property values+=Value*)
	 */
	protected void sequence_PropertyValues(ISerializationContext context, PropertyValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     type=PropertyType
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.PROPERTY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getTypePropertyTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShapeConstraint returns ShapeConstraint
	 *
	 * Constraint:
	 *     (shapeName=ShapeName shapeExpressions+=ShapeExpression)
	 */
	protected void sequence_ShapeConstraint(ISerializationContext context, ShapeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShapeExpression returns ShapeExpression
	 *
	 * Constraint:
	 *     propertyValues+=PropertyValues*
	 */
	protected void sequence_ShapeExpression(ISerializationContext context, ShapeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShapeName returns ShapeName
	 *
	 * Constraint:
	 *     name=UNICODE
	 */
	protected void sequence_ShapeName(ISerializationContext context, ShapeName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.NODE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShapesGraph returns ShapesGraph
	 *
	 * Constraint:
	 *     shapeConstraints+=ShapeConstraint*
	 */
	protected void sequence_ShapesGraph(ISerializationContext context, ShapesGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     name=UNICODE
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.NODE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
