/*
 * generated by Xtext 2.24.0
 */
package xtext.magicSHACL.serializer;

import com.google.inject.Inject;
import java.util.Set;
import magicSHACL.DataGraph;
import magicSHACL.Graph;
import magicSHACL.MagicSHACLPackage;
import magicSHACL.Namespace;
import magicSHACL.Predicate;
import magicSHACL.PredicateObject;
import magicSHACL.ShapeConstraint;
import magicSHACL.ShapeExpression;
import magicSHACL.ShapeName;
import magicSHACL.ShapesGraph;
import magicSHACL.Subject;
import magicSHACL.Target;
import magicSHACL.Triples;
import magicSHACL.Value;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.magicSHACL.services.TurtleGrammarAccess;

@SuppressWarnings("all")
public class TurtleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TurtleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MagicSHACLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MagicSHACLPackage.DATA_GRAPH:
				sequence_DataGraph(context, (DataGraph) semanticObject); 
				return; 
			case MagicSHACLPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case MagicSHACLPackage.NAMESPACE:
				sequence_Namespace(context, (Namespace) semanticObject); 
				return; 
			case MagicSHACLPackage.OBJECT:
				sequence_Object(context, (magicSHACL.Object) semanticObject); 
				return; 
			case MagicSHACLPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			case MagicSHACLPackage.PREDICATE_OBJECT:
				sequence_PredicateObject(context, (PredicateObject) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_CONSTRAINT:
				sequence_ShapeConstraint(context, (ShapeConstraint) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_EXPRESSION:
				sequence_ShapeExpression(context, (ShapeExpression) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPE_NAME:
				sequence_ShapeName(context, (ShapeName) semanticObject); 
				return; 
			case MagicSHACLPackage.SHAPES_GRAPH:
				sequence_ShapesGraph(context, (ShapesGraph) semanticObject); 
				return; 
			case MagicSHACLPackage.SUBJECT:
				sequence_Subject(context, (Subject) semanticObject); 
				return; 
			case MagicSHACLPackage.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			case MagicSHACLPackage.TRIPLES:
				sequence_Triples(context, (Triples) semanticObject); 
				return; 
			case MagicSHACLPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DataGraph returns DataGraph
	 *
	 * Constraint:
	 *     triples+=Triples*
	 */
	protected void sequence_DataGraph(ISerializationContext context, DataGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Graph returns Graph
	 *
	 * Constraint:
	 *     (namespaces+=Namespace* dataGraph=DataGraph shapesGraph=ShapesGraph)
	 */
	protected void sequence_Graph(ISerializationContext context, Graph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Namespace returns Namespace
	 *
	 * Constraint:
	 *     (prefix=ID namespace=IRI)
	 */
	protected void sequence_Namespace(ISerializationContext context, Namespace semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.NAMESPACE__PREFIX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.NAMESPACE__PREFIX));
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.NAMESPACE__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.NAMESPACE__NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamespaceAccess().getPrefixIDTerminalRuleCall_1_0(), semanticObject.getPrefix());
		feeder.accept(grammarAccess.getNamespaceAccess().getNamespaceIRITerminalRuleCall_2_0(), semanticObject.getNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Object returns Object
	 *
	 * Constraint:
	 *     (name=EString xsdType=EString?)
	 */
	protected void sequence_Object(ISerializationContext context, magicSHACL.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredicateObject returns PredicateObject
	 *
	 * Constraint:
	 *     (predicate=Predicate object=Object)
	 */
	protected void sequence_PredicateObject(ISerializationContext context, PredicateObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.PREDICATE_OBJECT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.PREDICATE_OBJECT__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.PREDICATE_OBJECT__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.PREDICATE_OBJECT__OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateObjectAccess().getPredicatePredicateParserRuleCall_0_0_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getPredicateObjectAccess().getObjectObjectParserRuleCall_0_1_0(), semanticObject.getObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MagicSHACLPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MagicSHACLPackage.Literals.NODE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShapeConstraint returns ShapeConstraint
	 *
	 * Constraint:
	 *     (shapeName=ShapeName (targets+=Target | shapeExpressions+=ShapeExpression)+)
	 */
	protected void sequence_ShapeConstraint(ISerializationContext context, ShapeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShapeExpression returns ShapeExpression
	 *
	 * Constraint:
	 *     (
	 *         (type=PropertyType values+=Value values+=Value*) | 
	 *         (type=PropertyType (values+=Value | shapeExpressions+=ShapeExpression+)?) | 
	 *         (type=PropertyType? shapeExpressions+=ShapeExpression*)
	 *     )
	 */
	protected void sequence_ShapeExpression(ISerializationContext context, ShapeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShapeName returns ShapeName
	 *
	 * Constraint:
	 *     (name=IRI | name=EString)
	 */
	protected void sequence_ShapeName(ISerializationContext context, ShapeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShapesGraph returns ShapesGraph
	 *
	 * Constraint:
	 *     shapeConstraints+=ShapeConstraint*
	 */
	protected void sequence_ShapesGraph(ISerializationContext context, ShapesGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subject returns Subject
	 *
	 * Constraint:
	 *     (name=EString | name=IRI)
	 */
	protected void sequence_Subject(ISerializationContext context, Subject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     ((type='sh:targetClass' | type='sh:targetNode') (term=EString | term=IRI))
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Triples returns Triples
	 *
	 * Constraint:
	 *     (subject=Subject predicateobject+=PredicateObject*)
	 */
	protected void sequence_Triples(ISerializationContext context, Triples semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     ((name=EString | name=IRI) xsdType=EString?)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
