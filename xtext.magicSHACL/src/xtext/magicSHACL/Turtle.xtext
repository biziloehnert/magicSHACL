// automatically generated by Xtext
grammar xtext.magicSHACL.Turtle with org.eclipse.xtext.common.Terminals

import "http://www.example.org/magicSHACL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Graph returns Graph:
	{Graph}
	(namespaces+=Namespace)*
	dataGraph=DataGraph
	shapesGraph=ShapesGraph
	;
	
Namespace returns Namespace:
	'@prefix' prefix=ID namespace=IRI '.';

DataGraph returns DataGraph:
	{DataGraph}
	(triples += Triples)*;

Triples returns Triples:
	subject=Subject
		(predicateobject+=PredicateObject)*
	'.'
;

PredicateObject returns PredicateObject:
	(predicate=Predicate object=Object)';' 
;

Subject returns Subject:
	{Subject}
	name=EString;

Predicate returns Predicate:
	{Predicate}
	name=EString;

Object returns Object:
	{Object}
	name=EString ('^^'xsdType=EString)?;

ShapesGraph returns ShapesGraph:
	{ShapesGraph}
	(shapeConstraints+=ShapeConstraint)*
	;

ShapeConstraint returns ShapeConstraint:
	{ShapeConstraint} 
	shapeName=ShapeName
		shapeExpressions+=ShapeExpression+
	'.'
;

ShapeName returns ShapeName:
	{ShapeName}
	name=EString;

ShapeExpression returns ShapeExpression:
	{ShapeExpression}
	(ID 'sh:NodeShape' ';') | 
	(type=PropertyType '('? ( values+=Value | '[' shapeExpressions+=ShapeExpression* ']')* ')'? ';'?)
;

Value returns Value:
	{Value}
	name=EString ('^^' xsdType=EString)?;

enum PropertyType:
	MinCountConstraintComponent='sh:minCount' | 
	MaxCountConstraintComponent='sh:maxCount' | 
	AndConstraintComponent='sh:and' |
	OrConstraintComponent='sh:or' | 
	NotConstraintComponent='sh:not' |
	ClassConstraintComponent="sh:class" |
	HasValueConstraintComponent='sh:hasValue' | 
	NodeKindConstraintComponent='sh:nodeKind' |
	NodeConstraintComponent='sh:node' | 
	DatatypeConstraintComponent='sh:datatype' | 
	PatternConstraintComponent= 'sh:pattern' | 
	ClosedConstraintComponent='sh:closed' |
	ClosedConstraintComponent_ignore='sh:ignoredProperties'	|
	PredicatePath='sh:path' | 
	InversePath='sh:inversePath' |
	Property='sh:property' | 
	Name='sh:name' | 
	TargetClass='sh:targetClass' | 
	TargetNode='sh:targetNode' | 
	Message='sh:message' | 
	MinExclusiveConstraintComponent='sh:minExclusive' | 
	MinInclusiveConstraintComponent='sh:minInclusive' | 
	MaxExclusiveConstraintComponent='sh:maxExclusive' | 
	MaxInclusiveConstraintComponent='sh:maxInclusive' | 
	MaxLengthConstraintComponent='sh:maxLength' | 
	MinLengthConstraintComponent='sh:minLength'
;

@Override 
terminal SL_COMMENT:
    ('#'|'//') !('\n'|'\r')* ('\r'? '\n')?
;

terminal IRI:
	'<'  !('<' | '>' | '"' | '{' | '}' | '|' | '^' | '`' | '\\' | '\u0000'..'\u0020')* '>';

@Override 
terminal ID:
    ('a'..'z'|'A'..'Z'|'_'|'0'..'9'('.''0'..'9')?|':'|'-')*;

EString returns ecore::EString:
	STRING | ID 
;
