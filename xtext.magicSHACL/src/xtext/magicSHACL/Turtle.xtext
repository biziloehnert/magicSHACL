// automatically generated by Xtext
grammar xtext.magicSHACL.Turtle with org.eclipse.xtext.common.Terminals

import "http://www.example.org/magicSHACL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Graph returns Graph:
	{Graph}
	(namespaces+=Namespace)*
	dataGraph=DataGraph
	shapesGraph=ShapesGraph
	'<>' (EString* '.')?
	;
	
Namespace returns Namespace:
	'@prefix' prefix=PREFIX '<' namespace=UNICODE '>' '.';

DataGraph returns DataGraph:
	{DataGraph}
	(triples += Triples)*;

Triples returns Triples:
	subject=Subject
		(predicateobject+=PredicateObject)*
	'.'
;

PredicateObject returns PredicateObject:
	(predicate=Predicate object=Object)';' 
;

Subject returns Subject:
	{Subject}
	name=UNICODE;

Predicate returns Predicate:
	{Predicate}
	name=UNICODE;

Object returns Object hidden(WS):
	{Object}
	name=UNICODE;

ShapesGraph returns ShapesGraph:
	{ShapesGraph}
	(shapeConstraints+=ShapeConstraint)*
	;

ShapeConstraint returns ShapeConstraint:
	{ShapeConstraint} 
	shapeName=ShapeName
		((UNICODE|'a') 'sh:NodeShape' ';' | shapeExpressions+=ShapeExpression)
		(shapeExpressions+=ShapeExpression)* 
	'.'
;

ShapeName returns ShapeName:
	{ShapeName}
	name=UNICODE;

ShapeExpression returns ShapeExpression:
	{ShapeExpression}
	propertyValues+=PropertyValues | 
		(type=PropertyType '[')
		((UNICODE|'a') 'sh:NodeShape' ';')?
		(('sh:property' | 'sh:path') '[')? 
		((propertyValues+=PropertyValues*)
		 ']' ';')+
;

PropertyValues returns PropertyValues:
	property=Property '('? (values+=Value)* ')'? ';'
;

Property returns Property:
	{Property}
	type=PropertyType;

Value returns Value:
	{Value}
	name=UNICODE;

enum PropertyType:
	MinCountConstraintComponent='sh:minCount' | 
	MaxCountConstraintComponent='sh:maxCount' | 
	AndConstraintComponent='sh:and' |
	OrConstraintComponent='sh:or' | 
	NotConstraintComponent='sh:not' |
	ClassConstraintComponent="sh:class" |
	HasValueConstraintComponent='sh:hasValue' | 
	NodeKindConstraintComponent='sh:nodeKind' |
	NodeConstraintComponent='sh:node' | 
	DatatypeConstraintComponent='sh:datatype' | 
	PatternConstraintComponent= 'sh:pattern' | 
	ClosedConstraintComponent='sh:closed' |
	ClosedConstraintComponent_ignore='sh:ignoredProperties'	|
	PredicatePath='sh:path' | 
	InversePath='sh:inversePath' |
	Property='sh:property' | 
	Name='sh:name' | 
	TargetClass='sh:targetClass' | 
	TargetNode='sh:targetNode'
;

terminal PREFIX:
	 ('a'..'z'|'A'..'Z'|'_')* ':'
;

terminal UNICODE:
        ('a'..'z'|'A'..'Z'|INT|'_'|':'|'#'|'/'|'.'|'-'|'\"'|"^"|'{'|'}'|'\\'|'$')*;

EString returns ecore::EString:
	STRING | ID;
