/*
 * generated by Xtext 2.24.0
 */
grammar InternalSimple;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.magicSHACL.services.SimpleGrammarAccess;

}
@parser::members {
	private SimpleGrammarAccess grammarAccess;

	public void setGrammarAccess(SimpleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapesGraph
entryRuleShapesGraph
:
{ before(grammarAccess.getShapesGraphRule()); }
	 ruleShapesGraph
{ after(grammarAccess.getShapesGraphRule()); } 
	 EOF 
;

// Rule ShapesGraph
ruleShapesGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapesGraphAccess().getGroup()); }
		(rule__ShapesGraph__Group__0)
		{ after(grammarAccess.getShapesGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTarget
entryRuleTarget
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetAccess().getGroup()); }
		(rule__Target__Group__0)
		{ after(grammarAccess.getTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeConstraint
entryRuleShapeConstraint
:
{ before(grammarAccess.getShapeConstraintRule()); }
	 ruleShapeConstraint
{ after(grammarAccess.getShapeConstraintRule()); } 
	 EOF 
;

// Rule ShapeConstraint
ruleShapeConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getGroup()); }
		(rule__ShapeConstraint__Group__0)
		{ after(grammarAccess.getShapeConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeName
entryRuleShapeName
:
{ before(grammarAccess.getShapeNameRule()); }
	 ruleShapeName
{ after(grammarAccess.getShapeNameRule()); } 
	 EOF 
;

// Rule ShapeName
ruleShapeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeNameAccess().getGroup()); }
		(rule__ShapeName__Group__0)
		{ after(grammarAccess.getShapeNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeExpression
entryRuleShapeExpression
:
{ before(grammarAccess.getShapeExpressionRule()); }
	 ruleShapeExpression
{ after(grammarAccess.getShapeExpressionRule()); } 
	 EOF 
;

// Rule ShapeExpression
ruleShapeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getAlternatives()); }
		(rule__ShapeExpression__Alternatives)
		{ after(grammarAccess.getShapeExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyValues
entryRulePropertyValues
:
{ before(grammarAccess.getPropertyValuesRule()); }
	 rulePropertyValues
{ after(grammarAccess.getPropertyValuesRule()); } 
	 EOF 
;

// Rule PropertyValues
rulePropertyValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getAlternatives()); }
		(rule__PropertyValues__Alternatives)
		{ after(grammarAccess.getPropertyValuesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getGroup()); }
		(rule__Property__Group__0)
		{ after(grammarAccess.getPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getGroup()); }
		(rule__Value__Group__0)
		{ after(grammarAccess.getValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PropertyType
rulePropertyType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
		(rule__PropertyType__Alternatives)
		{ after(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_0()); }
		(rule__ShapeExpression__Group_0__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_1()); }
		(rule__ShapeExpression__PropertyValuesAssignment_1)
		{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getGroup_0()); }
		(rule__PropertyValues__Group_0__0)
		{ after(grammarAccess.getPropertyValuesAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyValuesAccess().getGroup_1()); }
		(rule__PropertyValues__Group_1__0)
		{ after(grammarAccess.getPropertyValuesAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
		('MIN')
		{ after(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
		('MAX')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
		('AND')
		{ after(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
		('OR')
		{ after(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
		('NOT')
		{ after(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_5()); }
		('SOME ')
		{ after(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_6()); }
		('SOME ^')
		{ after(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphAction_0()); }
	()
	{ after(grammarAccess.getGraphAccess().getGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getShapesGraphAssignment_1()); }
	(rule__Graph__ShapesGraphAssignment_1)
	{ after(grammarAccess.getGraphAccess().getShapesGraphAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapesGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__0__Impl
	rule__ShapesGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
	()
	{ after(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__1__Impl
	rule__ShapesGraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getTargetsAssignment_1()); }
	(rule__ShapesGraph__TargetsAssignment_1)*
	{ after(grammarAccess.getShapesGraphAccess().getTargetsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_2()); }
	(rule__ShapesGraph__ShapeConstraintsAssignment_2)*
	{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__0__Impl
	rule__Target__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getTargetAction_0()); }
	()
	{ after(grammarAccess.getTargetAccess().getTargetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__1__Impl
	rule__Target__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getNameAssignment_1()); }
	(rule__Target__NameAssignment_1)
	{ after(grammarAccess.getTargetAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__2__Impl
	rule__Target__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getTargetAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__3__Impl
	rule__Target__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getTermAssignment_3()); }
	(rule__Target__TermAssignment_3)
	{ after(grammarAccess.getTargetAccess().getTermAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__4__Impl
	rule__Target__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getTargetAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getQuestionMarkKeyword_5()); }
	'?'
	{ after(grammarAccess.getTargetAccess().getQuestionMarkKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__0__Impl
	rule__ShapeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
	()
	{ after(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__1__Impl
	rule__ShapeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
	(rule__ShapeConstraint__ShapeNameAssignment_1)
	{ after(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__2__Impl
	rule__ShapeConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getColonHyphenMinusKeyword_2()); }
	':-'
	{ after(grammarAccess.getShapeConstraintAccess().getColonHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__3__Impl
	rule__ShapeConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_3()); }
	(rule__ShapeConstraint__ShapeExpressionsAssignment_3)
	{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getShapeConstraintAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__0__Impl
	rule__ShapeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
	()
	{ after(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
	(rule__ShapeName__NameAssignment_1)
	{ after(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_0__0__Impl
	rule__ShapeExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getValueAssignment_0_1()); }
	(rule__ShapeExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getShapeExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValues__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0__0__Impl
	rule__PropertyValues__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getPropertyValuesAction_0_0()); }
	()
	{ after(grammarAccess.getPropertyValuesAccess().getPropertyValuesAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getGroup_0_1()); }
	(rule__PropertyValues__Group_0_1__0)
	{ after(grammarAccess.getPropertyValuesAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValues__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1__0__Impl
	rule__PropertyValues__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_0()); }
	(rule__PropertyValues__ValuesAssignment_0_1_0)
	{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1__1__Impl
	rule__PropertyValues__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_0_1_1()); }
	(rule__PropertyValues__PropertyAssignment_0_1_1)
	{ after(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1__2__Impl
	rule__PropertyValues__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_2()); }
	(rule__PropertyValues__ValuesAssignment_0_1_2)
	{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getGroup_0_1_3()); }
	(rule__PropertyValues__Group_0_1_3__0)*
	{ after(grammarAccess.getPropertyValuesAccess().getGroup_0_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValues__Group_0_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1_3__0__Impl
	rule__PropertyValues__Group_0_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getANDKeyword_0_1_3_0()); }
	'AND'
	{ after(grammarAccess.getPropertyValuesAccess().getANDKeyword_0_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_0_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_0_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_3_1()); }
	(rule__PropertyValues__ValuesAssignment_0_1_3_1)
	{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_0_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValues__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_1__0__Impl
	rule__PropertyValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_1_0()); }
	(rule__PropertyValues__PropertyAssignment_1_0)
	{ after(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_1_1()); }
		(rule__PropertyValues__ValuesAssignment_1_1)
		{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_1_1()); }
		(rule__PropertyValues__ValuesAssignment_1_1)*
		{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getPropertyAction_0()); }
	()
	{ after(grammarAccess.getPropertyAccess().getPropertyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getTypeAssignment_1()); }
	(rule__Property__TypeAssignment_1)
	{ after(grammarAccess.getPropertyAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueAction_0()); }
	()
	{ after(grammarAccess.getValueAccess().getValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getNameAssignment_1()); }
	(rule__Value__NameAssignment_1)
	{ after(grammarAccess.getValueAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__ShapesGraphAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_1_0()); }
		ruleShapesGraph
		{ after(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__TargetsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapesGraphAccess().getTargetsTargetParserRuleCall_1_0()); }
		ruleTarget
		{ after(grammarAccess.getShapesGraphAccess().getTargetsTargetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__ShapeConstraintsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_2_0()); }
		ruleShapeConstraint
		{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getTargetAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TermAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getTermUNICODETerminalRuleCall_3_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getTargetAccess().getTermUNICODETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
		ruleShapeName
		{ after(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeExpressionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_3_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getValueUNICODETerminalRuleCall_0_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getShapeExpressionAccess().getValueUNICODETerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__PropertyValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_1_0()); }
		rulePropertyValues
		{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__ValuesAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_0_0()); }
		ruleValue
		{ after(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__PropertyAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_0_1_1_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__ValuesAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_2_0()); }
		ruleValue
		{ after(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__ValuesAssignment_0_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_3_1_0()); }
		ruleValue
		{ after(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_0_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__PropertyAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_1_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getTypePropertyTypeEnumRuleCall_1_0()); }
		rulePropertyType
		{ after(grammarAccess.getPropertyAccess().getTypePropertyTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_UNICODE : ('a'..'z'|'A'..'Z'|RULE_INT|'_'|':'|'#'|'/'|'.'|'-'|'"'|'{'|'}'|'\\'|'$')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
