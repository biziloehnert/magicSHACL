/*
 * generated by Xtext 2.24.0
 */
grammar InternalTurtle;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.magicSHACL.services.TurtleGrammarAccess;

}
@parser::members {
	private TurtleGrammarAccess grammarAccess;

	public void setGrammarAccess(TurtleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamespace
entryRuleNamespace
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamespaceAccess().getGroup()); }
		(rule__Namespace__Group__0)
		{ after(grammarAccess.getNamespaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataGraph
entryRuleDataGraph
:
{ before(grammarAccess.getDataGraphRule()); }
	 ruleDataGraph
{ after(grammarAccess.getDataGraphRule()); } 
	 EOF 
;

// Rule DataGraph
ruleDataGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataGraphAccess().getGroup()); }
		(rule__DataGraph__Group__0)
		{ after(grammarAccess.getDataGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriples
entryRuleTriples
:
{ before(grammarAccess.getTriplesRule()); }
	 ruleTriples
{ after(grammarAccess.getTriplesRule()); } 
	 EOF 
;

// Rule Triples
ruleTriples 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriplesAccess().getGroup()); }
		(rule__Triples__Group__0)
		{ after(grammarAccess.getTriplesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObject
entryRulePredicateObject
:
{ before(grammarAccess.getPredicateObjectRule()); }
	 rulePredicateObject
{ after(grammarAccess.getPredicateObjectRule()); } 
	 EOF 
;

// Rule PredicateObject
rulePredicateObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getGroup()); }
		(rule__PredicateObject__Group__0)
		{ after(grammarAccess.getPredicateObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubject
entryRuleSubject
:
{ before(grammarAccess.getSubjectRule()); }
	 ruleSubject
{ after(grammarAccess.getSubjectRule()); } 
	 EOF 
;

// Rule Subject
ruleSubject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubjectAccess().getGroup()); }
		(rule__Subject__Group__0)
		{ after(grammarAccess.getSubjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapesGraph
entryRuleShapesGraph
:
{ before(grammarAccess.getShapesGraphRule()); }
	 ruleShapesGraph
{ after(grammarAccess.getShapesGraphRule()); } 
	 EOF 
;

// Rule ShapesGraph
ruleShapesGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapesGraphAccess().getGroup()); }
		(rule__ShapesGraph__Group__0)
		{ after(grammarAccess.getShapesGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeConstraint
entryRuleShapeConstraint
:
{ before(grammarAccess.getShapeConstraintRule()); }
	 ruleShapeConstraint
{ after(grammarAccess.getShapeConstraintRule()); } 
	 EOF 
;

// Rule ShapeConstraint
ruleShapeConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getGroup()); }
		(rule__ShapeConstraint__Group__0)
		{ after(grammarAccess.getShapeConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTarget
entryRuleTarget
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetAccess().getGroup()); }
		(rule__Target__Group__0)
		{ after(grammarAccess.getTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeName
entryRuleShapeName
:
{ before(grammarAccess.getShapeNameRule()); }
	 ruleShapeName
{ after(grammarAccess.getShapeNameRule()); } 
	 EOF 
;

// Rule ShapeName
ruleShapeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeNameAccess().getGroup()); }
		(rule__ShapeName__Group__0)
		{ after(grammarAccess.getShapeNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeExpression
entryRuleShapeExpression
:
{ before(grammarAccess.getShapeExpressionRule()); }
	 ruleShapeExpression
{ after(grammarAccess.getShapeExpressionRule()); } 
	 EOF 
;

// Rule ShapeExpression
ruleShapeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup()); }
		(rule__ShapeExpression__Group__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getGroup()); }
		(rule__Value__Group__0)
		{ after(grammarAccess.getValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PropertyType
rulePropertyType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
		(rule__PropertyType__Alternatives)
		{ after(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getNameEStringParserRuleCall_1_0_0()); }
		ruleEString
		{ after(grammarAccess.getSubjectAccess().getNameEStringParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubjectAccess().getNameIRITerminalRuleCall_1_0_1()); }
		RULE_IRI
		{ after(grammarAccess.getSubjectAccess().getNameIRITerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getTargetsAssignment_2_0()); }
		(rule__ShapeConstraint__TargetsAssignment_2_0)
		{ after(grammarAccess.getShapeConstraintAccess().getTargetsAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_2_1()); }
		(rule__ShapeConstraint__ShapeExpressionsAssignment_2_1)
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getTypeShTargetClassKeyword_1_0_0()); }
		'sh:targetClass'
		{ after(grammarAccess.getTargetAccess().getTypeShTargetClassKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTargetAccess().getTypeShTargetNodeKeyword_1_0_1()); }
		'sh:targetNode'
		{ after(grammarAccess.getTargetAccess().getTypeShTargetNodeKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TermAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getTermEStringParserRuleCall_2_0_0()); }
		ruleEString
		{ after(grammarAccess.getTargetAccess().getTermEStringParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTargetAccess().getTermIRITerminalRuleCall_2_0_1()); }
		RULE_IRI
		{ after(grammarAccess.getTargetAccess().getTermIRITerminalRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeNameAccess().getNameIRITerminalRuleCall_1_0_0()); }
		RULE_IRI
		{ after(grammarAccess.getShapeNameAccess().getNameIRITerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeNameAccess().getNameEStringParserRuleCall_1_0_1()); }
		ruleEString
		{ after(grammarAccess.getShapeNameAccess().getNameEStringParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_0()); }
		(rule__ShapeExpression__Group_1_0__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_1()); }
		(rule__ShapeExpression__Group_1_1__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_2()); }
		(rule__ShapeExpression__Group_1_2__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_1_2_0()); }
		(rule__ShapeExpression__ValuesAssignment_1_1_2_0)
		{ after(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_1_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionsAssignment_1_1_2_1()); }
		(rule__ShapeExpression__ShapeExpressionsAssignment_1_1_2_1)*
		{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionsAssignment_1_1_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNameEStringParserRuleCall_1_0_0()); }
		ruleEString
		{ after(grammarAccess.getValueAccess().getNameEStringParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNameIRITerminalRuleCall_1_0_1()); }
		RULE_IRI
		{ after(grammarAccess.getValueAccess().getNameIRITerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
		('sh:minCount')
		{ after(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
		('sh:maxCount')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
		('sh:and')
		{ after(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
		('sh:or')
		{ after(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
		('sh:not')
		{ after(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClassConstraintComponentEnumLiteralDeclaration_5()); }
		('sh:class')
		{ after(grammarAccess.getPropertyTypeAccess().getClassConstraintComponentEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getHasValueConstraintComponentEnumLiteralDeclaration_6()); }
		('sh:hasValue')
		{ after(grammarAccess.getPropertyTypeAccess().getHasValueConstraintComponentEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getHasClassConstraintComponentEnumLiteralDeclaration_7()); }
		('sh:hasClass')
		{ after(grammarAccess.getPropertyTypeAccess().getHasClassConstraintComponentEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNodeKindConstraintComponentEnumLiteralDeclaration_8()); }
		('sh:nodeKind')
		{ after(grammarAccess.getPropertyTypeAccess().getNodeKindConstraintComponentEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNodeConstraintComponentEnumLiteralDeclaration_9()); }
		('sh:node')
		{ after(grammarAccess.getPropertyTypeAccess().getNodeConstraintComponentEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getDatatypeConstraintComponentEnumLiteralDeclaration_10()); }
		('sh:datatype')
		{ after(grammarAccess.getPropertyTypeAccess().getDatatypeConstraintComponentEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPatternConstraintComponentEnumLiteralDeclaration_11()); }
		('sh:pattern')
		{ after(grammarAccess.getPropertyTypeAccess().getPatternConstraintComponentEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponentEnumLiteralDeclaration_12()); }
		('sh:closed')
		{ after(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponentEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponent_ignoreEnumLiteralDeclaration_13()); }
		('sh:ignoredProperties')
		{ after(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponent_ignoreEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_14()); }
		('sh:path')
		{ after(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_15()); }
		('sh:inversePath')
		{ after(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPropertyEnumLiteralDeclaration_16()); }
		('sh:property')
		{ after(grammarAccess.getPropertyTypeAccess().getPropertyEnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNameEnumLiteralDeclaration_17()); }
		('sh:name')
		{ after(grammarAccess.getPropertyTypeAccess().getNameEnumLiteralDeclaration_17()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMessageEnumLiteralDeclaration_18()); }
		('sh:message')
		{ after(grammarAccess.getPropertyTypeAccess().getMessageEnumLiteralDeclaration_18()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getEqualsConstraintComponentEnumLiteralDeclaration_19()); }
		('sh:equals')
		{ after(grammarAccess.getPropertyTypeAccess().getEqualsConstraintComponentEnumLiteralDeclaration_19()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinExclusiveConstraintComponentEnumLiteralDeclaration_20()); }
		('sh:minExclusive')
		{ after(grammarAccess.getPropertyTypeAccess().getMinExclusiveConstraintComponentEnumLiteralDeclaration_20()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinInclusiveConstraintComponentEnumLiteralDeclaration_21()); }
		('sh:minInclusive')
		{ after(grammarAccess.getPropertyTypeAccess().getMinInclusiveConstraintComponentEnumLiteralDeclaration_21()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxExclusiveConstraintComponentEnumLiteralDeclaration_22()); }
		('sh:maxExclusive')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxExclusiveConstraintComponentEnumLiteralDeclaration_22()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxInclusiveConstraintComponentEnumLiteralDeclaration_23()); }
		('sh:maxInclusive')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxInclusiveConstraintComponentEnumLiteralDeclaration_23()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxLengthConstraintComponentEnumLiteralDeclaration_24()); }
		('sh:maxLength')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxLengthConstraintComponentEnumLiteralDeclaration_24()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinLengthConstraintComponentEnumLiteralDeclaration_25()); }
		('sh:minLength')
		{ after(grammarAccess.getPropertyTypeAccess().getMinLengthConstraintComponentEnumLiteralDeclaration_25()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getQualifiedValueShapeEnumLiteralDeclaration_26()); }
		('sh:qualifiedValueShape')
		{ after(grammarAccess.getPropertyTypeAccess().getQualifiedValueShapeEnumLiteralDeclaration_26()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getQualifiedMaxCountEnumLiteralDeclaration_27()); }
		('sh:qualifiedMaxCount')
		{ after(grammarAccess.getPropertyTypeAccess().getQualifiedMaxCountEnumLiteralDeclaration_27()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getQualifiedMinCountEnumLiteralDeclaration_28()); }
		('sh:qualifiedMinCount')
		{ after(grammarAccess.getPropertyTypeAccess().getQualifiedMinCountEnumLiteralDeclaration_28()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getInstanceOfEnumLiteralDeclaration_29()); }
		('a')
		{ after(grammarAccess.getPropertyTypeAccess().getInstanceOfEnumLiteralDeclaration_29()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getRdfsLabelEnumLiteralDeclaration_30()); }
		('rdfs:label')
		{ after(grammarAccess.getPropertyTypeAccess().getRdfsLabelEnumLiteralDeclaration_30()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getDescriptionEnumLiteralDeclaration_31()); }
		('sh:description')
		{ after(grammarAccess.getPropertyTypeAccess().getDescriptionEnumLiteralDeclaration_31()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphAction_0()); }
	()
	{ after(grammarAccess.getGraphAccess().getGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getNamespacesAssignment_1()); }
	(rule__Graph__NamespacesAssignment_1)*
	{ after(grammarAccess.getGraphAccess().getNamespacesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__2__Impl
	rule__Graph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getDataGraphAssignment_2()); }
	(rule__Graph__DataGraphAssignment_2)
	{ after(grammarAccess.getGraphAccess().getDataGraphAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getShapesGraphAssignment_3()); }
	(rule__Graph__ShapesGraphAssignment_3)
	{ after(grammarAccess.getGraphAccess().getShapesGraphAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getPrefixKeyword_0()); }
	'@prefix'
	{ after(grammarAccess.getNamespaceAccess().getPrefixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getPrefixAssignment_1()); }
	(rule__Namespace__PrefixAssignment_1)
	{ after(grammarAccess.getNamespaceAccess().getPrefixAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__2__Impl
	rule__Namespace__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getNamespaceAssignment_2()); }
	(rule__Namespace__NamespaceAssignment_2)
	{ after(grammarAccess.getNamespaceAccess().getNamespaceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getNamespaceAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataGraph__Group__0__Impl
	rule__DataGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataGraphAccess().getDataGraphAction_0()); }
	()
	{ after(grammarAccess.getDataGraphAccess().getDataGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataGraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataGraphAccess().getTriplesAssignment_1()); }
	(rule__DataGraph__TriplesAssignment_1)*
	{ after(grammarAccess.getDataGraphAccess().getTriplesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Triples__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__0__Impl
	rule__Triples__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
	(rule__Triples__SubjectAssignment_0)
	{ after(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__1__Impl
	rule__Triples__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getPredicateobjectAssignment_1()); }
	(rule__Triples__PredicateobjectAssignment_1)*
	{ after(grammarAccess.getTriplesAccess().getPredicateobjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getTriplesAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__0__Impl
	rule__PredicateObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getGroup_0()); }
	(rule__PredicateObject__Group_0__0)
	{ after(grammarAccess.getPredicateObjectAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getPredicateObjectAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group_0__0__Impl
	rule__PredicateObject__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getPredicateAssignment_0_0()); }
	(rule__PredicateObject__PredicateAssignment_0_0)
	{ after(grammarAccess.getPredicateObjectAccess().getPredicateAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getObjectAssignment_0_1()); }
	(rule__PredicateObject__ObjectAssignment_0_1)
	{ after(grammarAccess.getPredicateObjectAccess().getObjectAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subject__Group__0__Impl
	rule__Subject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectAccess().getSubjectAction_0()); }
	()
	{ after(grammarAccess.getSubjectAccess().getSubjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectAccess().getNameAssignment_1()); }
	(rule__Subject__NameAssignment_1)
	{ after(grammarAccess.getSubjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
	()
	{ after(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getNameAssignment_1()); }
	(rule__Predicate__NameAssignment_1)
	{ after(grammarAccess.getPredicateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObjectAction_0()); }
	()
	{ after(grammarAccess.getObjectAccess().getObjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getNameAssignment_1()); }
	(rule__Object__NameAssignment_1)
	{ after(grammarAccess.getObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getGroup_2()); }
	(rule__Object__Group_2__0)?
	{ after(grammarAccess.getObjectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__0__Impl
	rule__Object__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getCircumflexAccentCircumflexAccentKeyword_2_0()); }
	'^^'
	{ after(grammarAccess.getObjectAccess().getCircumflexAccentCircumflexAccentKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getXsdTypeAssignment_2_1()); }
	(rule__Object__XsdTypeAssignment_2_1)
	{ after(grammarAccess.getObjectAccess().getXsdTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapesGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__0__Impl
	rule__ShapesGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
	()
	{ after(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_1()); }
	(rule__ShapesGraph__ShapeConstraintsAssignment_1)*
	{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__0__Impl
	rule__ShapeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
	()
	{ after(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__1__Impl
	rule__ShapeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
	(rule__ShapeConstraint__ShapeNameAssignment_1)
	{ after(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__2__Impl
	rule__ShapeConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
		(rule__ShapeConstraint__Alternatives_2)
		{ after(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
	)
	(
		{ before(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
		(rule__ShapeConstraint__Alternatives_2)*
		{ after(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getShapeConstraintAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__0__Impl
	rule__Target__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getTargetAction_0()); }
	()
	{ after(grammarAccess.getTargetAccess().getTargetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__1__Impl
	rule__Target__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getTypeAssignment_1()); }
	(rule__Target__TypeAssignment_1)
	{ after(grammarAccess.getTargetAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__2__Impl
	rule__Target__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getTermAssignment_2()); }
	(rule__Target__TermAssignment_2)
	{ after(grammarAccess.getTargetAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getTargetAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__0__Impl
	rule__ShapeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
	()
	{ after(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
	(rule__ShapeName__NameAssignment_1)
	{ after(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group__0__Impl
	rule__ShapeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0()); }
	()
	{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group__1__Impl
	rule__ShapeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getAlternatives_1()); }
	(rule__ShapeExpression__Alternatives_1)
	{ after(grammarAccess.getShapeExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0__0__Impl
	rule__ShapeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_0_0()); }
	(rule__ShapeExpression__TypeAssignment_1_0_0)
	{ after(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0__1__Impl
	rule__ShapeExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_0_1()); }
	(rule__ShapeExpression__ValuesAssignment_1_0_1)
	{ after(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_0_2()); }
	(rule__ShapeExpression__Group_1_0_2__0)*
	{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0_2__0__Impl
	rule__ShapeExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getCommaKeyword_1_0_2_0()); }
	','
	{ after(grammarAccess.getShapeExpressionAccess().getCommaKeyword_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_0_2_1()); }
	(rule__ShapeExpression__ValuesAssignment_1_0_2_1)
	{ after(grammarAccess.getShapeExpressionAccess().getValuesAssignment_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__0__Impl
	rule__ShapeExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_1_0()); }
	(rule__ShapeExpression__TypeAssignment_1_1_0)
	{ after(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__1__Impl
	rule__ShapeExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }
	'('
	{ after(grammarAccess.getShapeExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__2__Impl
	rule__ShapeExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getAlternatives_1_1_2()); }
	(rule__ShapeExpression__Alternatives_1_1_2)
	{ after(grammarAccess.getShapeExpressionAccess().getAlternatives_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getRightParenthesisKeyword_1_1_3()); }
	')'
	{ after(grammarAccess.getShapeExpressionAccess().getRightParenthesisKeyword_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__0__Impl
	rule__ShapeExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_2_0()); }
	(rule__ShapeExpression__TypeAssignment_1_2_0)?
	{ after(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__1__Impl
	rule__ShapeExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }
	'['
	{ after(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__2__Impl
	rule__ShapeExpression__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionsAssignment_1_2_2()); }
	(rule__ShapeExpression__ShapeExpressionsAssignment_1_2_2)*
	{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionsAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getRightSquareBracketKeyword_1_2_3()); }
	']'
	{ after(grammarAccess.getShapeExpressionAccess().getRightSquareBracketKeyword_1_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueAction_0()); }
	()
	{ after(grammarAccess.getValueAccess().getValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__1__Impl
	rule__Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getNameAssignment_1()); }
	(rule__Value__NameAssignment_1)
	{ after(grammarAccess.getValueAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__2__Impl
	rule__Value__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getIDTerminalRuleCall_2()); }
	(RULE_ID)?
	{ after(grammarAccess.getValueAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getGroup_3()); }
	(rule__Value__Group_3__0)?
	{ after(grammarAccess.getValueAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_3__0__Impl
	rule__Value__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getCircumflexAccentCircumflexAccentKeyword_3_0()); }
	'^^'
	{ after(grammarAccess.getValueAccess().getCircumflexAccentCircumflexAccentKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getXsdTypeAssignment_3_1()); }
	(rule__Value__XsdTypeAssignment_3_1)
	{ after(grammarAccess.getValueAccess().getXsdTypeAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__NamespacesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getNamespacesNamespaceParserRuleCall_1_0()); }
		ruleNamespace
		{ after(grammarAccess.getGraphAccess().getNamespacesNamespaceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__DataGraphAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getDataGraphDataGraphParserRuleCall_2_0()); }
		ruleDataGraph
		{ after(grammarAccess.getGraphAccess().getDataGraphDataGraphParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__ShapesGraphAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_3_0()); }
		ruleShapesGraph
		{ after(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__PrefixAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamespaceAccess().getPrefixIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNamespaceAccess().getPrefixIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__NamespaceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamespaceAccess().getNamespaceIRITerminalRuleCall_2_0()); }
		RULE_IRI
		{ after(grammarAccess.getNamespaceAccess().getNamespaceIRITerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__TriplesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataGraphAccess().getTriplesTriplesParserRuleCall_1_0()); }
		ruleTriples
		{ after(grammarAccess.getDataGraphAccess().getTriplesTriplesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__SubjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
		ruleSubject
		{ after(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__PredicateobjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getPredicateobjectPredicateObjectParserRuleCall_1_0()); }
		rulePredicateObject
		{ after(grammarAccess.getTriplesAccess().getPredicateobjectPredicateObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__PredicateAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getPredicatePredicateParserRuleCall_0_0_0()); }
		rulePredicate
		{ after(grammarAccess.getPredicateObjectAccess().getPredicatePredicateParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ObjectAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectObjectParserRuleCall_0_1_0()); }
		ruleObject
		{ after(grammarAccess.getPredicateObjectAccess().getObjectObjectParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getNameAlternatives_1_0()); }
		(rule__Subject__NameAlternatives_1_0)
		{ after(grammarAccess.getSubjectAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getPredicateAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getObjectAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__XsdTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getXsdTypeEStringParserRuleCall_2_1_0()); }
		ruleEString
		{ after(grammarAccess.getObjectAccess().getXsdTypeEStringParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__ShapeConstraintsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_1_0()); }
		ruleShapeConstraint
		{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
		ruleShapeName
		{ after(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__TargetsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getTargetsTargetParserRuleCall_2_0_0()); }
		ruleTarget
		{ after(grammarAccess.getShapeConstraintAccess().getTargetsTargetParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_2_1_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getTypeAlternatives_1_0()); }
		(rule__Target__TypeAlternatives_1_0)
		{ after(grammarAccess.getTargetAccess().getTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getTermAlternatives_2_0()); }
		(rule__Target__TermAlternatives_2_0)
		{ after(grammarAccess.getTargetAccess().getTermAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeNameAccess().getNameAlternatives_1_0()); }
		(rule__ShapeName__NameAlternatives_1_0)
		{ after(grammarAccess.getShapeNameAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__TypeAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_0_0_0()); }
		rulePropertyType
		{ after(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ValuesAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_0_1_0()); }
		ruleValue
		{ after(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ValuesAssignment_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_0_2_1_0()); }
		ruleValue
		{ after(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__TypeAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_1_0_0()); }
		rulePropertyType
		{ after(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ValuesAssignment_1_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_1_2_0_0()); }
		ruleValue
		{ after(grammarAccess.getShapeExpressionAccess().getValuesValueParserRuleCall_1_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ShapeExpressionsAssignment_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionsShapeExpressionParserRuleCall_1_1_2_1_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionsShapeExpressionParserRuleCall_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__TypeAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_2_0_0()); }
		rulePropertyType
		{ after(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__ShapeExpressionsAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionsShapeExpressionParserRuleCall_1_2_2_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionsShapeExpressionParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNameAlternatives_1_0()); }
		(rule__Value__NameAlternatives_1_0)
		{ after(grammarAccess.getValueAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__XsdTypeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getXsdTypeEStringParserRuleCall_3_1_0()); }
		ruleEString
		{ after(grammarAccess.getValueAccess().getXsdTypeEStringParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : ('#'|'//') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_IRI : '<' ~(('<'|'>'|'"'|'{'|'}'|'|'|'^'|'`'|'\\'|'\u0000'..' '))* '>';

RULE_ID : '@'? ('a'..'z'|'A'..'Z'|'_'|'0'..'9' ('.' '0'..'9')?|':'|'-')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
