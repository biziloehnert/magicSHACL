/*
 * generated by Xtext 2.24.0
 */
grammar InternalTurtle;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.magicSHACL.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.magicSHACL.services.TurtleGrammarAccess;

}
@parser::members {
	private TurtleGrammarAccess grammarAccess;

	public void setGrammarAccess(TurtleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamespace
entryRuleNamespace
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamespaceAccess().getGroup()); }
		(rule__Namespace__Group__0)
		{ after(grammarAccess.getNamespaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataGraph
entryRuleDataGraph
:
{ before(grammarAccess.getDataGraphRule()); }
	 ruleDataGraph
{ after(grammarAccess.getDataGraphRule()); } 
	 EOF 
;

// Rule DataGraph
ruleDataGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataGraphAccess().getGroup()); }
		(rule__DataGraph__Group__0)
		{ after(grammarAccess.getDataGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriples
entryRuleTriples
:
{ before(grammarAccess.getTriplesRule()); }
	 ruleTriples
{ after(grammarAccess.getTriplesRule()); } 
	 EOF 
;

// Rule Triples
ruleTriples 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriplesAccess().getGroup()); }
		(rule__Triples__Group__0)
		{ after(grammarAccess.getTriplesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObject
entryRulePredicateObject
:
{ before(grammarAccess.getPredicateObjectRule()); }
	 rulePredicateObject
{ after(grammarAccess.getPredicateObjectRule()); } 
	 EOF 
;

// Rule PredicateObject
rulePredicateObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getGroup()); }
		(rule__PredicateObject__Group__0)
		{ after(grammarAccess.getPredicateObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubject
entryRuleSubject
:
{ before(grammarAccess.getSubjectRule()); }
	 ruleSubject
{ after(grammarAccess.getSubjectRule()); } 
	 EOF 
;

// Rule Subject
ruleSubject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubjectAccess().getGroup()); }
		(rule__Subject__Group__0)
		{ after(grammarAccess.getSubjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Object
ruleObject 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleShapesGraph
entryRuleShapesGraph
:
{ before(grammarAccess.getShapesGraphRule()); }
	 ruleShapesGraph
{ after(grammarAccess.getShapesGraphRule()); } 
	 EOF 
;

// Rule ShapesGraph
ruleShapesGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapesGraphAccess().getGroup()); }
		(rule__ShapesGraph__Group__0)
		{ after(grammarAccess.getShapesGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeConstraint
entryRuleShapeConstraint
:
{ before(grammarAccess.getShapeConstraintRule()); }
	 ruleShapeConstraint
{ after(grammarAccess.getShapeConstraintRule()); } 
	 EOF 
;

// Rule ShapeConstraint
ruleShapeConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getGroup()); }
		(rule__ShapeConstraint__Group__0)
		{ after(grammarAccess.getShapeConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeName
entryRuleShapeName
:
{ before(grammarAccess.getShapeNameRule()); }
	 ruleShapeName
{ after(grammarAccess.getShapeNameRule()); } 
	 EOF 
;

// Rule ShapeName
ruleShapeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeNameAccess().getGroup()); }
		(rule__ShapeName__Group__0)
		{ after(grammarAccess.getShapeNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeExpression
entryRuleShapeExpression
:
{ before(grammarAccess.getShapeExpressionRule()); }
	 ruleShapeExpression
{ after(grammarAccess.getShapeExpressionRule()); } 
	 EOF 
;

// Rule ShapeExpression
ruleShapeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getAlternatives()); }
		(rule__ShapeExpression__Alternatives)
		{ after(grammarAccess.getShapeExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyValues
entryRulePropertyValues
:
{ before(grammarAccess.getPropertyValuesRule()); }
	 rulePropertyValues
{ after(grammarAccess.getPropertyValuesRule()); } 
	 EOF 
;

// Rule PropertyValues
rulePropertyValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getGroup()); }
		(rule__PropertyValues__Group__0)
		{ after(grammarAccess.getPropertyValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getGroup()); }
		(rule__Property__Group__0)
		{ after(grammarAccess.getPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getGroup()); }
		(rule__Value__Group__0)
		{ after(grammarAccess.getValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PropertyType
rulePropertyType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
		(rule__PropertyType__Alternatives)
		{ after(grammarAccess.getPropertyTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getGroup_2_0()); }
		(rule__ShapeConstraint__Group_2_0__0)
		{ after(grammarAccess.getShapeConstraintAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_2_1()); }
		(rule__ShapeConstraint__ShapeExpressionsAssignment_2_1)
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Alternatives_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getUNICODETerminalRuleCall_2_0_0_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getShapeConstraintAccess().getUNICODETerminalRuleCall_2_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeConstraintAccess().getAKeyword_2_0_0_1()); }
		'a'
		{ after(grammarAccess.getShapeConstraintAccess().getAKeyword_2_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_0()); }
		(rule__ShapeExpression__Group_0__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1()); }
		(rule__ShapeExpression__Group_1__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getUNICODETerminalRuleCall_1_1_0_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getShapeExpressionAccess().getUNICODETerminalRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getAKeyword_1_1_0_1()); }
		'a'
		{ after(grammarAccess.getShapeExpressionAccess().getAKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Alternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getShPropertyKeyword_1_2_0_0()); }
		'sh:property'
		{ after(grammarAccess.getShapeExpressionAccess().getShPropertyKeyword_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeExpressionAccess().getShPathKeyword_1_2_0_1()); }
		'sh:path'
		{ after(grammarAccess.getShapeExpressionAccess().getShPathKeyword_1_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
		('sh:minCount')
		{ after(grammarAccess.getPropertyTypeAccess().getMinCountConstraintComponentEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
		('sh:maxCount')
		{ after(grammarAccess.getPropertyTypeAccess().getMaxCountConstraintComponentEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
		('sh:and')
		{ after(grammarAccess.getPropertyTypeAccess().getAndConstraintComponentEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
		('sh:or')
		{ after(grammarAccess.getPropertyTypeAccess().getOrConstraintComponentEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
		('sh:not')
		{ after(grammarAccess.getPropertyTypeAccess().getNotConstraintComponentEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClassConstraintComponentEnumLiteralDeclaration_5()); }
		('sh:class')
		{ after(grammarAccess.getPropertyTypeAccess().getClassConstraintComponentEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getHasValueConstraintComponentEnumLiteralDeclaration_6()); }
		('sh:hasValue')
		{ after(grammarAccess.getPropertyTypeAccess().getHasValueConstraintComponentEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNodeKindConstraintComponentEnumLiteralDeclaration_7()); }
		('sh:nodeKind')
		{ after(grammarAccess.getPropertyTypeAccess().getNodeKindConstraintComponentEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNodeConstraintComponentEnumLiteralDeclaration_8()); }
		('sh:node')
		{ after(grammarAccess.getPropertyTypeAccess().getNodeConstraintComponentEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getDatatypeConstraintComponentEnumLiteralDeclaration_9()); }
		('sh:datatype')
		{ after(grammarAccess.getPropertyTypeAccess().getDatatypeConstraintComponentEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPatternConstraintComponentEnumLiteralDeclaration_10()); }
		('sh:pattern')
		{ after(grammarAccess.getPropertyTypeAccess().getPatternConstraintComponentEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponentEnumLiteralDeclaration_11()); }
		('sh:closed')
		{ after(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponentEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponent_ignoreEnumLiteralDeclaration_12()); }
		('sh:ignoredProperties')
		{ after(grammarAccess.getPropertyTypeAccess().getClosedConstraintComponent_ignoreEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_13()); }
		('sh:path')
		{ after(grammarAccess.getPropertyTypeAccess().getPredicatePathEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_14()); }
		('sh:inversePath')
		{ after(grammarAccess.getPropertyTypeAccess().getInversePathEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getPropertyEnumLiteralDeclaration_15()); }
		('sh:property')
		{ after(grammarAccess.getPropertyTypeAccess().getPropertyEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getNameEnumLiteralDeclaration_16()); }
		('sh:name')
		{ after(grammarAccess.getPropertyTypeAccess().getNameEnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getTargetClassEnumLiteralDeclaration_17()); }
		('sh:targetClass')
		{ after(grammarAccess.getPropertyTypeAccess().getTargetClassEnumLiteralDeclaration_17()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyTypeAccess().getTargetNodeEnumLiteralDeclaration_18()); }
		('sh:targetNode')
		{ after(grammarAccess.getPropertyTypeAccess().getTargetNodeEnumLiteralDeclaration_18()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphAction_0()); }
	()
	{ after(grammarAccess.getGraphAccess().getGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getNamespacesAssignment_1()); }
	(rule__Graph__NamespacesAssignment_1)*
	{ after(grammarAccess.getGraphAccess().getNamespacesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__2__Impl
	rule__Graph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getDataGraphAssignment_2()); }
	(rule__Graph__DataGraphAssignment_2)
	{ after(grammarAccess.getGraphAccess().getDataGraphAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__3__Impl
	rule__Graph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getShapesGraphAssignment_3()); }
	(rule__Graph__ShapesGraphAssignment_3)
	{ after(grammarAccess.getGraphAccess().getShapesGraphAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__4__Impl
	rule__Graph__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getLessThanSignGreaterThanSignKeyword_4()); }
	'<>'
	{ after(grammarAccess.getGraphAccess().getLessThanSignGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGroup_5()); }
	(rule__Graph__Group_5__0)?
	{ after(grammarAccess.getGraphAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group_5__0__Impl
	rule__Graph__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getEStringParserRuleCall_5_0()); }
	(ruleEString)*
	{ after(grammarAccess.getGraphAccess().getEStringParserRuleCall_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getFullStopKeyword_5_1()); }
	'.'
	{ after(grammarAccess.getGraphAccess().getFullStopKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getPrefixKeyword_0()); }
	'@prefix'
	{ after(grammarAccess.getNamespaceAccess().getPrefixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getPrefixAssignment_1()); }
	(rule__Namespace__PrefixAssignment_1)
	{ after(grammarAccess.getNamespaceAccess().getPrefixAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__2__Impl
	rule__Namespace__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getLessThanSignKeyword_2()); }
	'<'
	{ after(grammarAccess.getNamespaceAccess().getLessThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__3__Impl
	rule__Namespace__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getNamespaceAssignment_3()); }
	(rule__Namespace__NamespaceAssignment_3)
	{ after(grammarAccess.getNamespaceAccess().getNamespaceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__4__Impl
	rule__Namespace__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getGreaterThanSignKeyword_4()); }
	'>'
	{ after(grammarAccess.getNamespaceAccess().getGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getNamespaceAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataGraph__Group__0__Impl
	rule__DataGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataGraphAccess().getDataGraphAction_0()); }
	()
	{ after(grammarAccess.getDataGraphAccess().getDataGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataGraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataGraphAccess().getTriplesAssignment_1()); }
	(rule__DataGraph__TriplesAssignment_1)*
	{ after(grammarAccess.getDataGraphAccess().getTriplesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Triples__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__0__Impl
	rule__Triples__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
	(rule__Triples__SubjectAssignment_0)
	{ after(grammarAccess.getTriplesAccess().getSubjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__1__Impl
	rule__Triples__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getPredicateobjectAssignment_1()); }
	(rule__Triples__PredicateobjectAssignment_1)*
	{ after(grammarAccess.getTriplesAccess().getPredicateobjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triples__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getTriplesAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__0__Impl
	rule__PredicateObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getGroup_0()); }
	(rule__PredicateObject__Group_0__0)
	{ after(grammarAccess.getPredicateObjectAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getPredicateObjectAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group_0__0__Impl
	rule__PredicateObject__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getPredicateAssignment_0_0()); }
	(rule__PredicateObject__PredicateAssignment_0_0)
	{ after(grammarAccess.getPredicateObjectAccess().getPredicateAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getObjectAssignment_0_1()); }
	(rule__PredicateObject__ObjectAssignment_0_1)
	{ after(grammarAccess.getPredicateObjectAccess().getObjectAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subject__Group__0__Impl
	rule__Subject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectAccess().getSubjectAction_0()); }
	()
	{ after(grammarAccess.getSubjectAccess().getSubjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectAccess().getNameAssignment_1()); }
	(rule__Subject__NameAssignment_1)
	{ after(grammarAccess.getSubjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
	()
	{ after(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getNameAssignment_1()); }
	(rule__Predicate__NameAssignment_1)
	{ after(grammarAccess.getPredicateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObjectAction_0()); }
	()
	{ after(grammarAccess.getObjectAccess().getObjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getNameAssignment_1()); }
	(rule__Object__NameAssignment_1)
	{ after(grammarAccess.getObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapesGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__0__Impl
	rule__ShapesGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
	()
	{ after(grammarAccess.getShapesGraphAccess().getShapesGraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapesGraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_1()); }
	(rule__ShapesGraph__ShapeConstraintsAssignment_1)*
	{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__0__Impl
	rule__ShapeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
	()
	{ after(grammarAccess.getShapeConstraintAccess().getShapeConstraintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__1__Impl
	rule__ShapeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
	(rule__ShapeConstraint__ShapeNameAssignment_1)
	{ after(grammarAccess.getShapeConstraintAccess().getShapeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__2__Impl
	rule__ShapeConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
	(rule__ShapeConstraint__Alternatives_2)
	{ after(grammarAccess.getShapeConstraintAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__3__Impl
	rule__ShapeConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_3()); }
	(rule__ShapeConstraint__ShapeExpressionsAssignment_3)*
	{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getShapeConstraintAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeConstraint__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group_2_0__0__Impl
	rule__ShapeConstraint__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getAlternatives_2_0_0()); }
	(rule__ShapeConstraint__Alternatives_2_0_0)
	{ after(grammarAccess.getShapeConstraintAccess().getAlternatives_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group_2_0__1__Impl
	rule__ShapeConstraint__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getShNodeShapeKeyword_2_0_1()); }
	'sh:NodeShape'
	{ after(grammarAccess.getShapeConstraintAccess().getShNodeShapeKeyword_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeConstraint__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeConstraintAccess().getSemicolonKeyword_2_0_2()); }
	';'
	{ after(grammarAccess.getShapeConstraintAccess().getSemicolonKeyword_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__0__Impl
	rule__ShapeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
	()
	{ after(grammarAccess.getShapeNameAccess().getShapeNameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
	(rule__ShapeName__NameAssignment_1)
	{ after(grammarAccess.getShapeNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_0__0__Impl
	rule__ShapeExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getShapeExpressionAccess().getShapeExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_0_1()); }
	(rule__ShapeExpression__PropertyValuesAssignment_0_1)
	{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1__0__Impl
	rule__ShapeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_0()); }
	(rule__ShapeExpression__Group_1_0__0)
	{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1__1__Impl
	rule__ShapeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_1()); }
	(rule__ShapeExpression__Group_1_1__0)?
	{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1__2__Impl
	rule__ShapeExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_2()); }
	(rule__ShapeExpression__Group_1_2__0)?
	{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_3()); }
		(rule__ShapeExpression__Group_1_3__0)
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_3()); }
	)
	(
		{ before(grammarAccess.getShapeExpressionAccess().getGroup_1_3()); }
		(rule__ShapeExpression__Group_1_3__0)*
		{ after(grammarAccess.getShapeExpressionAccess().getGroup_1_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0__0__Impl
	rule__ShapeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_0_0()); }
	(rule__ShapeExpression__TypeAssignment_1_0_0)
	{ after(grammarAccess.getShapeExpressionAccess().getTypeAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_0_1()); }
	'['
	{ after(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__0__Impl
	rule__ShapeExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getAlternatives_1_1_0()); }
	(rule__ShapeExpression__Alternatives_1_1_0)
	{ after(grammarAccess.getShapeExpressionAccess().getAlternatives_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__1__Impl
	rule__ShapeExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getShNodeShapeKeyword_1_1_1()); }
	'sh:NodeShape'
	{ after(grammarAccess.getShapeExpressionAccess().getShNodeShapeKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_1_1_2()); }
	';'
	{ after(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__0__Impl
	rule__ShapeExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getAlternatives_1_2_0()); }
	(rule__ShapeExpression__Alternatives_1_2_0)
	{ after(grammarAccess.getShapeExpressionAccess().getAlternatives_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }
	'['
	{ after(grammarAccess.getShapeExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeExpression__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_3__0__Impl
	rule__ShapeExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_1_3_0()); }
	(rule__ShapeExpression__PropertyValuesAssignment_1_3_0)*
	{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesAssignment_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_3__1__Impl
	rule__ShapeExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getRightSquareBracketKeyword_1_3_1()); }
	']'
	{ after(grammarAccess.getShapeExpressionAccess().getRightSquareBracketKeyword_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__Group_1_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_1_3_2()); }
	';'
	{ after(grammarAccess.getShapeExpressionAccess().getSemicolonKeyword_1_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValues__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group__0__Impl
	rule__PropertyValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_0()); }
	(rule__PropertyValues__PropertyAssignment_0)
	{ after(grammarAccess.getPropertyValuesAccess().getPropertyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group__1__Impl
	rule__PropertyValues__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getLeftParenthesisKeyword_1()); }
	('(')?
	{ after(grammarAccess.getPropertyValuesAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group__2__Impl
	rule__PropertyValues__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getValuesAssignment_2()); }
	(rule__PropertyValues__ValuesAssignment_2)*
	{ after(grammarAccess.getPropertyValuesAccess().getValuesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group__3__Impl
	rule__PropertyValues__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getRightParenthesisKeyword_3()); }
	(')')?
	{ after(grammarAccess.getPropertyValuesAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyValues__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyValuesAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getPropertyValuesAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getPropertyAction_0()); }
	()
	{ after(grammarAccess.getPropertyAccess().getPropertyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getTypeAssignment_1()); }
	(rule__Property__TypeAssignment_1)
	{ after(grammarAccess.getPropertyAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueAction_0()); }
	()
	{ after(grammarAccess.getValueAccess().getValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getNameAssignment_1()); }
	(rule__Value__NameAssignment_1)
	{ after(grammarAccess.getValueAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__NamespacesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getNamespacesNamespaceParserRuleCall_1_0()); }
		ruleNamespace
		{ after(grammarAccess.getGraphAccess().getNamespacesNamespaceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__DataGraphAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getDataGraphDataGraphParserRuleCall_2_0()); }
		ruleDataGraph
		{ after(grammarAccess.getGraphAccess().getDataGraphDataGraphParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__ShapesGraphAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_3_0()); }
		ruleShapesGraph
		{ after(grammarAccess.getGraphAccess().getShapesGraphShapesGraphParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__PrefixAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamespaceAccess().getPrefixPREFIXTerminalRuleCall_1_0()); }
		RULE_PREFIX
		{ after(grammarAccess.getNamespaceAccess().getPrefixPREFIXTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__NamespaceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamespaceAccess().getNamespaceUNICODETerminalRuleCall_3_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getNamespaceAccess().getNamespaceUNICODETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataGraph__TriplesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataGraphAccess().getTriplesTriplesParserRuleCall_1_0()); }
		ruleTriples
		{ after(grammarAccess.getDataGraphAccess().getTriplesTriplesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__SubjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
		ruleSubject
		{ after(grammarAccess.getTriplesAccess().getSubjectSubjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triples__PredicateobjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesAccess().getPredicateobjectPredicateObjectParserRuleCall_1_0()); }
		rulePredicateObject
		{ after(grammarAccess.getTriplesAccess().getPredicateobjectPredicateObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__PredicateAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getPredicatePredicateParserRuleCall_0_0_0()); }
		rulePredicate
		{ after(grammarAccess.getPredicateObjectAccess().getPredicatePredicateParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ObjectAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectObjectParserRuleCall_0_1_0()); }
		ruleObject
		{ after(grammarAccess.getPredicateObjectAccess().getObjectObjectParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getSubjectAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getPredicateAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getObjectAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapesGraph__ShapeConstraintsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_1_0()); }
		ruleShapeConstraint
		{ after(grammarAccess.getShapesGraphAccess().getShapeConstraintsShapeConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
		ruleShapeName
		{ after(grammarAccess.getShapeConstraintAccess().getShapeNameShapeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_2_1_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeConstraint__ShapeExpressionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_3_0()); }
		ruleShapeExpression
		{ after(grammarAccess.getShapeConstraintAccess().getShapeExpressionsShapeExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getShapeNameAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__PropertyValuesAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_0_1_0()); }
		rulePropertyValues
		{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__TypeAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_0_0_0()); }
		rulePropertyType
		{ after(grammarAccess.getShapeExpressionAccess().getTypePropertyTypeEnumRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeExpression__PropertyValuesAssignment_1_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_1_3_0_0()); }
		rulePropertyValues
		{ after(grammarAccess.getShapeExpressionAccess().getPropertyValuesPropertyValuesParserRuleCall_1_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__PropertyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertyValuesAccess().getPropertyPropertyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValues__ValuesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getPropertyValuesAccess().getValuesValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getTypePropertyTypeEnumRuleCall_1_0()); }
		rulePropertyType
		{ after(grammarAccess.getPropertyAccess().getTypePropertyTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0()); }
		RULE_UNICODE
		{ after(grammarAccess.getValueAccess().getNameUNICODETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PREFIX : ('a'..'z'|'A'..'Z'|'_')* ':';

RULE_UNICODE : ('a'..'z'|'A'..'Z'|RULE_INT|'_'|':'|'#'|'/'|'.'|'-'|'"'|'^'|'{'|'}'|'\\'|'$')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
